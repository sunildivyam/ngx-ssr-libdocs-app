{
    "pipes": [],
    "interfaces": [
        {
            "name": "ClassInfo",
            "id": "interface-ClassInfo-ecb2d4337a3b0d60e33112037d063259307ada86b0a5e251f10f7d61bd15bd3d25196406b4b07cdf1a0f9029b1e7fc8247bedc53979a54287140584c3c545541",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/class-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface ClassInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ComponentData",
            "id": "interface-ComponentData-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DocsData",
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ComponentInfo",
            "id": "interface-ComponentInfo-33d9e7e8e46f87d910e577a1c5f0f8625801fdd0ad052cea8ddd3290b287e69628bdfbfef54d4091de70e77a74ab2cc2bdfe73d48c5d8396fde31d224a3d843c",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/component-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface ComponentInfo {\r\n    name: string;\r\n    description: string;\r\n    selector: string;\r\n    styleUrl: string;\r\n    styleSource: string;\r\n    templateUrl: string;\r\n    templateSource: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "styleSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "styleUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "templateSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "templateUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ComponentProp",
            "id": "interface-ComponentProp-89fca6fbf12f31e4c58e57991f9b1a0bd41d957a9d0272b82fb1fadd1e66e1080c26452c3e33ea32333c0b9f23e26050214305ae7ee9f8296f156f3c6b53d12a",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/component-props.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ComponentProp {\r\n    name: string;\r\n    type?: string;\r\n    defaultValue?: string;\r\n    deprecated?: boolean;\r\n    deprecationMessage?: string;\r\n    description?: string;\r\n    accessModifier?: string;\r\n    returnType?: string;\r\n    args?: Array<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessModifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "deprecated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "deprecationMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "returnType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ComponentTypes",
            "id": "interface-ComponentTypes-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Type<any>",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "DirectiveInfo",
            "id": "interface-DirectiveInfo-86456e766e2ca25cdb1290e7cf7e4ccb0ae3062e10b00369bf1b2097ad9c8e33930e44cd501154284221af440405a3b38db19f29e5923d73d9aeed611c860225",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/directive-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface DirectiveInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DocsData",
            "id": "interface-DocsData-87eb65a116dd9dc700eaaa7ffda6cbf3ac3a89a59caa2706b7821192ba9139012a2047bd8bf61e1541cf0fe4f1892ffcee0248e1ef66c10270aaca15745e0c3f",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-common.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DocsData {\r\n   projectionContent?: any;\r\n   inputPropsValues?: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "inputPropsValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectionContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GuardInfo",
            "id": "interface-GuardInfo-cdfd5170d7bc6ca67e46f83fe445cdd2834d78c00d4914f132b9bb6596d6a987b32bedd8231cf5fa305de18b2ff216ba623dbe8cb3f9e281d4f71154c6b9f0f6",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/guard-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface GuardInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InterceptorInfo",
            "id": "interface-InterceptorInfo-2ab409b883f73e1507e4da478d00a90d19d808540072807d4334e0df5c109884cd350bd99d26b9ade690a81ed41d4eee459925079abe321bdf370939ef095547",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/interceptor-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface InterceptorInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InterfaceInfo",
            "id": "interface-InterfaceInfo-1bef29386c2cae21ca397df45ada6bb9ff67f7bfad998ffcad2f4f5e77cfc42be9f993da9ce57b5513ebbf4692aca8be6c1f0191f34122276c665a2cc8eb411b",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/interface-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InterfaceInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LibAssetsInfo",
            "id": "interface-LibAssetsInfo-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ClassInfo>",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentInfo>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "directives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DirectiveInfo>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "guards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<GuardInfo>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "interceptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<InterceptorInfo>",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "interfaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<InterfaceInfo>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "services",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ServiceInfo>",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LibInfo",
            "id": "interface-LibInfo-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [
                {
                    "name": "bugs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "componentData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentData",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "componentTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentTypes",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "dependencies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "descriptionHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "git",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "homepage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "keywords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "libAssetsInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LibAssetsInfo",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "npm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "serviceTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServiceTypes",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LibsInfo",
            "id": "interface-LibsInfo-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "LibInfo",
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServiceInfo",
            "id": "interface-ServiceInfo-c7a723f8c18add702d9e4a63929156c6dc1e9c617b553891e089e9b5b79c136d99e447370bef2a583ea02f13e19ed090a88d4e58ceb83e53a824d0d3fe823fd6",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/service-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentProp } from \"./component-props.interface\";\r\n\r\nexport interface ServiceInfo {\r\n    name: string;\r\n    description: string;\r\n    tsUrl: string;\r\n    tsSource: string;\r\n    inputProps: Array<ComponentProp>;\r\n    outputProps: Array<ComponentProp>;\r\n    props: Array<ComponentProp>;\r\n    methods: Array<ComponentProp>;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outputProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tsSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServiceTypes",
            "id": "interface-ServiceTypes-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
            "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Type } from \"@angular/core\";\r\nimport { ClassInfo } from \"./class-info.interface\";\r\nimport { ComponentInfo } from \"./component-info.interface\";\r\nimport { DirectiveInfo } from \"./directive-info.interface\";\r\nimport { DocsData } from \"./docs-common.interface\";\r\nimport { GuardInfo } from \"./guard-info.interface\";\r\nimport { InterceptorInfo } from \"./interceptor-info.interface\";\r\nimport { InterfaceInfo } from \"./interface-info.interface\";\r\nimport { ServiceInfo } from \"./service-info.interface\";\r\n\r\nexport interface ComponentTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ServiceTypes {\r\n    [key: string]: Type<any>;\r\n}\r\n\r\nexport interface ComponentData {\r\n    [key: string]: DocsData;\r\n}\r\n\r\nexport interface LibAssetsInfo {\r\n    components?: Array<ComponentInfo>;\r\n    services?: Array<ServiceInfo>;\r\n    directives?: Array<DirectiveInfo>;\r\n    interfaces?: Array<InterfaceInfo>;\r\n    guards?: Array<GuardInfo>;\r\n    classes?: Array<ClassInfo>;\r\n    interceptors?: Array<InterceptorInfo>;\r\n}\r\n\r\nexport type LibAssetInfo = ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo;\r\n\r\nexport interface LibInfo {\r\n    name: string;\r\n    fullName: string;\r\n    version: string;\r\n    description: string;        // from package.json description, can be used for metaInfo\r\n    descriptionHtml: string;    // from readme.md\r\n    keywords: Array<string>;    // from package.json keywords, can be used for metaInfo\r\n    homepage: string;\r\n    bugs: string;\r\n    git: string;\r\n    dependencies: Array<string>;\r\n    node: string;\r\n    npm: string;\r\n    libAssetsInfo?: LibAssetsInfo;\r\n    componentTypes?: ComponentTypes;\r\n    serviceTypes?: ServiceTypes;\r\n    componentData?: ComponentData;\r\n}\r\n\r\nexport interface LibsInfo {\r\n    [key: string]: LibInfo;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3ff0c57b3a57baa3f491520a907f58cc3749bdebe74ff03f992cea1d3ba0eedc04ad9bfe0410d6745005817aca7a0c4dd7fe6a603b1cb18b5559f4e32e2242e0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Type<any>",
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DocsInfoService",
            "id": "injectable-DocsInfoService-a72d6ad9886c2b8cd3b00bb62283cd339e2e4e97fc76ba330ecd5493e4201481df439d926594e7893b8275f0c991e192c68223a59c3ac3e5eb2fb3ec9c8f833c",
            "file": "projects/ngx-lib-docs/docs-common/src/services/docs-info.service.ts",
            "properties": [
                {
                    "name": "libsInfo$",
                    "defaultValue": "new BehaviorSubject<LibsInfo>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLibInfo",
                    "args": [
                        {
                            "name": "libInfo",
                            "type": "LibInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "libInfo",
                            "type": "LibInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLibAssetInfo",
                    "args": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "LibAssetTypeEnums",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentInfo | ServiceInfo | InterfaceInfo | DirectiveInfo | ClassInfo | InterceptorInfo | GuardInfo",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "LibAssetTypeEnums",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLibAssetsInfo",
                    "args": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<LibAssetsInfo>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLibInfo",
                    "args": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LibInfo",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "libName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLibsInfo",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<LibsInfo>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, throwError } from 'rxjs';\r\nimport { LibAssetsInfo, LibInfo, LibsInfo } from '../interfaces/docs-info.interface';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { LibAssetTypeEnums } from '../enums/docs-info.enums';\r\nimport { DocsParserService } from './docs-parser.service';\r\nimport { ComponentInfo } from '../interfaces/component-info.interface';\r\nimport { ServiceInfo } from '../interfaces/service-info.interface';\r\nimport { InterfaceInfo } from '../interfaces/interface-info.interface';\r\nimport { DirectiveInfo } from '../interfaces/directive-info.interface';\r\nimport { ClassInfo } from '../interfaces/class-info.interface';\r\nimport { InterceptorInfo } from '../interfaces/interceptor-info.interface';\r\nimport { GuardInfo } from '../interfaces/guard-info.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocsInfoService {\r\n  private libsInfo$ = new BehaviorSubject<LibsInfo>({});\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private docsParserService: DocsParserService,\r\n  ) { }\r\n\r\n\r\n  public get libsInfo(): Observable<LibsInfo> {\r\n    return this.libsInfo$.asObservable();\r\n  }\r\n\r\n\r\n  public get libsInfoValue(): LibsInfo {\r\n    return this.libsInfo$.value;\r\n  }\r\n\r\n  public set libsInfoValue(value: LibsInfo) {\r\n    this.libsInfo$.next(value);\r\n  }\r\n\r\n  public addLibInfo(libInfo: LibInfo): void {\r\n    this.libsInfo$.next({ ...this.libsInfo$.value, [libInfo.name]: libInfo });\r\n  }\r\n\r\n  public async getLibAssetsInfo(libName: string, url: string): Promise<LibAssetsInfo> {\r\n    if (!url) throw new Error(`Invalid lib's documentation.json url`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (this.libsInfoValue[libName]?.libAssetsInfo) {\r\n        resolve(this.libsInfoValue[libName]?.libAssetsInfo);\r\n      } else {\r\n        this.httpClient.get<any>(url, { responseType: 'json' })\r\n          .pipe(catchError(\r\n            (errorResponse: any) => {\r\n              let errorMsg: string;\r\n              if (errorResponse.error instanceof HttpErrorResponse) {\r\n                errorMsg = errorResponse.error.message;\r\n              } else {\r\n                errorMsg = errorResponse.message\r\n              }\r\n              const error = { code: errorResponse.status || errorResponse?.error?.code || errorResponse?.code || 'UNKNOWN', message: errorMsg || 'Something went wrong' }\r\n              reject(error);\r\n\r\n              return throwError(() => {\r\n                return error;\r\n              });\r\n            }\r\n          ))\r\n          .subscribe(docsResponse => {\r\n            const interceptors = [].concat(\r\n              docsResponse.injectables.filter(inj => inj.file.includes('.interceptor.')) || [],\r\n              docsResponse.interceptors || []\r\n            );\r\n\r\n            const guards = [].concat(\r\n              docsResponse.injectables.filter(inj => inj.file.includes('.guard.')) || [],\r\n              docsResponse.guards || []\r\n            );\r\n\r\n            const services = docsResponse.injectables.filter(\r\n              inj => !inj.file.includes('.guard.') && !inj.file.includes('.guard.')\r\n            ) || []\r\n\r\n\r\n            const libAssetsInfo: LibAssetsInfo = {\r\n              services: services.map(service => this.docsParserService.parseServiceInfo(service)) || [],\r\n              components: docsResponse.components.map(component => this.docsParserService.parseComponentInfo(component)) || [],\r\n              interfaces: docsResponse.interfaces.map(intf => this.docsParserService.parseServiceInfo(intf)) || [],\r\n              classes: docsResponse.classes.map(cls => this.docsParserService.parseServiceInfo(cls)) || [],\r\n              directives: docsResponse.directives.map(dirtve => this.docsParserService.parseComponentInfo(dirtve)) || [],\r\n              interceptors: interceptors.map(interceptor => this.docsParserService.parseServiceInfo(interceptor)) || [],\r\n              guards: guards.map(guard => this.docsParserService.parseServiceInfo(guard)) || [],\r\n            };\r\n\r\n            resolve(libAssetsInfo);\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n  public async getLibsInfo(url: string): Promise<LibsInfo> {\r\n    if (!url) throw new Error(`Invalid lib's documentation.json url`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.get<any>(url, { responseType: 'json' })\r\n        .pipe(catchError(\r\n          (errorResponse: any) => {\r\n            let errorMsg: string;\r\n            if (errorResponse.error instanceof HttpErrorResponse) {\r\n              errorMsg = errorResponse.error.message;\r\n            } else {\r\n              errorMsg = errorResponse.message\r\n            }\r\n            console.log(errorResponse);\r\n            const error = { code: errorResponse.status || errorResponse?.error?.code || errorResponse?.code || 'UNKNOWN', message: errorMsg || 'Something went wrong' }\r\n            reject(error);\r\n\r\n            return throwError(() => {\r\n              return error;\r\n            });\r\n          }\r\n        ))\r\n        .subscribe((libsInfo: LibsInfo) => {\r\n          resolve(libsInfo);\r\n        });\r\n    })\r\n  }\r\n\r\n  public getLibAssetInfo(\r\n    libName: string,\r\n    name: string,\r\n    type: LibAssetTypeEnums):\r\n    ComponentInfo | ServiceInfo | InterfaceInfo | DirectiveInfo | ClassInfo | InterceptorInfo | GuardInfo {\r\n    let assetInfo: ComponentInfo | ServiceInfo | InterfaceInfo | DirectiveInfo | ClassInfo | InterceptorInfo | GuardInfo = null;\r\n\r\n    if (!libName || !name) {\r\n      throw new Error('Library Name and Component Name are required.');\r\n    }\r\n\r\n    const libInfo = this.libsInfoValue[libName];\r\n    if (!libInfo) {\r\n      throw new Error(`Library ${libName} info is not added yet. Please add using addLibInfo()`);\r\n    }\r\n\r\n    if (libInfo?.libAssetsInfo[type]?.length) {\r\n      assetInfo = libInfo?.libAssetsInfo[type]?.find(c => c.name === name);\r\n    }\r\n\r\n    return assetInfo;\r\n  }\r\n\r\n  public getLibInfo(libName: string): LibInfo {\r\n\r\n    if (!libName) {\r\n      throw new Error('Library Name is required.');\r\n    }\r\n\r\n    const libInfo = this.libsInfoValue[libName];\r\n\r\n    return libInfo;\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "libsInfo": {
                    "name": "libsInfo",
                    "getSignature": {
                        "name": "libsInfo",
                        "type": "",
                        "returnType": "Observable<LibsInfo>",
                        "line": 27
                    }
                },
                "libsInfoValue": {
                    "name": "libsInfoValue",
                    "setSignature": {
                        "name": "libsInfoValue",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "LibsInfo",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "LibsInfo",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "libsInfoValue",
                        "type": "",
                        "returnType": "LibsInfo",
                        "line": 32
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DocsParserService",
            "id": "injectable-DocsParserService-edbf5062994f4317a358e3a20ea9444e72644f964f62a44ba9c96b311dc0aa5ad355b72ee809adc8de0e3a471a434b7e7f42bb0994b32c3246adf5eea84d3c88",
            "file": "projects/ngx-lib-docs/docs-common/src/services/docs-parser.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "parseComponentInfo",
                    "args": [
                        {
                            "name": "rawCmpInfo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentInfo",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawCmpInfo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseMethod",
                    "args": [
                        {
                            "name": "cmpMethod",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentProp",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "cmpMethod",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseProp",
                    "args": [
                        {
                            "name": "cmpProp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentProp",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "cmpProp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parsePropValue",
                    "args": [
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parsePropValueToStr",
                    "args": [
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseServiceInfo",
                    "args": [
                        {
                            "name": "rawSvcInfo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "ServiceInfo",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawSvcInfo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UtilsService } from '@annuadvent/ngx-core/utils';\r\nimport { ComponentProp } from '../interfaces/component-props.interface';\r\nimport { ACCESS_MODIFIERS } from '../constants/docs-common.constants';\r\nimport { ComponentInfo } from '../interfaces/component-info.interface';\r\nimport { ServiceInfo } from '../interfaces/service-info.interface';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocsParserService {\r\n\r\n  constructor(private utilsService: UtilsService) { }\r\n\r\n  public parseProp(cmpProp: any): ComponentProp {\r\n    return {\r\n      name: cmpProp.name || '',\r\n      type: cmpProp.type || '',\r\n      defaultValue: cmpProp.defaultValue || '',\r\n      deprecated: cmpProp.deprecated || '',\r\n      deprecationMessage: cmpProp.deprecationMessage || '',\r\n      description: cmpProp.description || '',\r\n      accessModifier: cmpProp.modifierKind && ACCESS_MODIFIERS[cmpProp.modifierKind[0]] || '',\r\n    } as ComponentProp;\r\n  }\r\n\r\n  public parseMethod(cmpMethod: any): ComponentProp {\r\n    return {\r\n      name: cmpMethod.name || '',\r\n      returnType: cmpMethod.returnType || '',\r\n      args: cmpMethod.args || [],\r\n      deprecated: cmpMethod.deprecated || '',\r\n      deprecationMessage: cmpMethod.deprecationMessage || '',\r\n      description: cmpMethod.description || '',\r\n      accessModifier: ACCESS_MODIFIERS[cmpMethod.modifierKind],\r\n    } as ComponentProp;\r\n  }\r\n\r\n  public parseComponentInfo(rawCmpInfo: any = {}): ComponentInfo {\r\n    return {\r\n      name: rawCmpInfo.name || '',\r\n      description: rawCmpInfo.description || '',\r\n      selector: rawCmpInfo.selector || '',\r\n      styleUrl: rawCmpInfo.styleUrlsData && rawCmpInfo.styleUrlsData[0].styleUrl || '',\r\n      styleSource: rawCmpInfo.styleUrlsData && rawCmpInfo.styleUrlsData[0].data || '',\r\n      templateUrl: rawCmpInfo.templateUrl && rawCmpInfo.templateUrl[0] || '',\r\n      templateSource: rawCmpInfo.templateData || '',\r\n      tsUrl: rawCmpInfo.file || '',\r\n      tsSource: rawCmpInfo.sourceCode || '',\r\n      inputProps: rawCmpInfo.inputsClass && rawCmpInfo.inputsClass.map(p => this.parseProp(p)) || [],\r\n      outputProps: rawCmpInfo.outputsClass && rawCmpInfo.outputsClass.map(p => this.parseProp(p)) || [],\r\n      props: rawCmpInfo.propertiesClass && rawCmpInfo.propertiesClass.map(p => this.parseProp(p)) || [],\r\n      methods: rawCmpInfo.methodsClass && rawCmpInfo.methodsClass.map(m => this.parseMethod(m)) || [],\r\n    } as ComponentInfo;\r\n  }\r\n\r\n  public parseServiceInfo(rawSvcInfo: any = {}): ServiceInfo {\r\n    return {\r\n      name: rawSvcInfo.name || '',\r\n      description: rawSvcInfo.description || '',\r\n      tsUrl: rawSvcInfo.file || '',\r\n      tsSource: rawSvcInfo.sourceCode || '',\r\n      inputProps: rawSvcInfo.inputsClass && rawSvcInfo.inputsClass.map(p => this.parseProp(p)) || [],\r\n      outputProps: rawSvcInfo.outputsClass && rawSvcInfo.outputsClass.map(p => this.parseProp(p)) || [],\r\n      props: rawSvcInfo.properties && rawSvcInfo.properties.map(p => this.parseProp(p)) || [],\r\n      methods: rawSvcInfo.methods && rawSvcInfo.methods.map(m => this.parseMethod(m)) || [],\r\n    } as ServiceInfo;\r\n  }\r\n\r\n  public parsePropValue(prop: ComponentProp, value: any): any {\r\n    let paramValue;\r\n    try {\r\n      switch (prop.type) {\r\n        case 'string':\r\n          paramValue = value === 'null' ? null : value;\r\n          break;\r\n        case 'number':\r\n          paramValue = parseInt(value);\r\n          break;\r\n        case 'boolean':\r\n          paramValue = value === 'null' ? null : value === 'false' ? false : Boolean(value);\r\n          break;\r\n        default:\r\n          paramValue = value === 'null' ? null : JSON.parse(value);\r\n      }\r\n    } catch (error: any) {\r\n      paramValue = this.utilsService.replaceSingleWithDoubleQuotes(value);\r\n      try {\r\n        paramValue = paramValue === 'null' ? null : JSON.parse(paramValue);\r\n      } catch (error: any) {\r\n        paramValue = value;\r\n      }\r\n    }\r\n\r\n    return paramValue;\r\n  }\r\n\r\n  public parsePropValueToStr(prop: ComponentProp, value: any): any {\r\n    let paramValue;\r\n    try {\r\n      switch (prop.type) {\r\n        case 'string':\r\n          paramValue = value === null ? 'null' : this.utilsService.stripsOutQuotesFromStartAndEnd(value);\r\n          break;\r\n        case 'number':\r\n          paramValue = value;\r\n          break;\r\n        case 'boolean':\r\n          paramValue = value === 'null' ? null : value === 'false' ? false : value;\r\n          break;\r\n        default:\r\n          paramValue = value === null ? 'null' : JSON.stringify(value, null, '\\t');\r\n          paramValue = this.utilsService.stripsOutQuotesFromStartAndEnd(paramValue);\r\n      }\r\n    } catch (error: any) {\r\n      paramValue = value;\r\n    }\r\n\r\n    return paramValue;\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ClassInfoComponent",
            "id": "component-ClassInfoComponent-dc06c3f8224226ff967eed9f5eda6dc852736deb2d36ceceb08c889ecafd997e80b3f5898068529f4e9f1c8492d0aac5c8a2ffb67c0d0cbaabdf368e7e0a6ae7",
            "file": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-class-info",
            "styleUrls": [
                "./class-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./class-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ClassInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tabs",
                    "defaultValue": "CLASS_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { ClassInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { CLASS_INFO_TABS } from '../../constants/class-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n@Component({\r\n  selector: 'anu-class-info',\r\n  templateUrl: './class-info.component.html',\r\n  styleUrls: ['./class-info.component.scss']\r\n})\r\nexport class ClassInfoComponent implements OnInit {\r\n  @Input() classInfo: ClassInfo;\r\n\r\n  tabs = CLASS_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[0];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .info-article {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./class-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<article class=\"info-article\">\r\n    <h1>{{classInfo?.name}}</h1>\r\n    <p [innerHtml]=\"classInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"classInfo?.inputProps && classInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"classInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"classInfo?.outputProps && classInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"classInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"classInfo?.props && classInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"classInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"classInfo?.methods && classInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"classInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <h2>{{classInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"classInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n<anu-spinner [show]=\"loading\"></anu-spinner>\r\n<anu-error *ngIf=\"error\" [code]=\"error?.code || 404\"\r\n    [message]=\"error?.message || 'Class name not found - ' + classInfo?.name\">\r\n</anu-error>"
        },
        {
            "name": "ComponentInfoComponent",
            "id": "component-ComponentInfoComponent-4a3744701310349ca67abe8db2497f752ec401e2fd10b6ea37aef09ebc5e4923279c9aeaac438322fa63300cf4ee97341e2a18e46aa3e4095adaa915cd65846a",
            "file": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-component-info",
            "styleUrls": [
                "./component-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "componentData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent Usage sample data, usually comes from \"component-name.docs.ts\" file\npresent in the component's folder.\n",
                    "description": "<p>Component Usage sample data, usually comes from &quot;component-name.docs.ts&quot; file\npresent in the component&#39;s folder.</p>\n",
                    "line": 26,
                    "type": "DocsData",
                    "decorators": []
                },
                {
                    "name": "componentInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent info, that usually comes from the compdoc generated json.\n",
                    "description": "<p>Component info, that usually comes from the compdoc generated json.</p>\n",
                    "line": 17,
                    "type": "ComponentInfo",
                    "decorators": []
                },
                {
                    "name": "componentType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent Class, eg. MenuComponent, TabsComponent etc.\n",
                    "description": "<p>Component Class, eg. MenuComponent, TabsComponent etc.</p>\n",
                    "line": 21,
                    "type": "Type<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[1]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tabs",
                    "defaultValue": "COMMPONENT_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Type } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { ComponentInfo, DocsData, PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { COMMPONENT_INFO_TABS } from '../../constants/component-info.constants';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'anu-component-info',\r\n  templateUrl: './component-info.component.html',\r\n  styleUrls: ['./component-info.component.scss']\r\n})\r\nexport class ComponentInfoComponent implements OnInit {\r\n  /**\r\n   * Component info, that usually comes from the compdoc generated json.\r\n   */\r\n  @Input() componentInfo: ComponentInfo;\r\n  /**\r\n     * Component Class, eg. MenuComponent, TabsComponent etc.\r\n     */\r\n  @Input() componentType: Type<any> = null;\r\n  /**\r\n   * Component Usage sample data, usually comes from \"component-name.docs.ts\" file\r\n   * present in the component's folder.\r\n   */\r\n  @Input() componentData: DocsData = null;\r\n\r\n  tabs = COMMPONENT_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[1];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    .usage {\r\n        position: relative;\r\n        min-height: 10rem;\r\n    }\r\n\r\n    .component-info {\r\n        &_article {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n}",
                    "styleUrl": "./component-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<article class=\"component-info_article\">\r\n    <h1>{{componentInfo?.name}}</h1>\r\n    <p [innerHtml]=\"componentInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"componentInfo?.inputProps && componentInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"componentInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"componentInfo?.outputProps && componentInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"componentInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"componentInfo?.props && componentInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"componentInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"componentInfo?.methods && componentInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"componentInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n\r\n    <section class=\"usage\" *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <!-- TODO: Remove this ng-content once usage component is done. -->\r\n        <anu-component-usage [componentInfo]=\"componentInfo\" [componentType]=\"componentType\"\r\n            [componentData]=\"componentData\">\r\n        </anu-component-usage>\r\n        <ng-content></ng-content>\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[2].name\">\r\n        <h2>{{componentInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"componentInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[3].name\">\r\n        <h2>{{componentInfo?.templateUrl}}</h2>\r\n        <anu-code-block [source]=\"componentInfo?.templateSource\"></anu-code-block>\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[4].name\">\r\n        <h2>{{componentInfo?.styleUrl}}</h2>\r\n        <anu-code-block [source]=\"componentInfo?.styleSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n"
        },
        {
            "name": "ComponentPropsComponent",
            "id": "component-ComponentPropsComponent-4071bfb511f7d3695cd76b49290ac8ea88e8eaddf81e4c7af93d5c30ad271fae8ca66e188fa316315f14129f6a81151f07cadf950d3bcfd8bdbfcc0c0f1ec1d0",
            "file": "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-component-props",
            "styleUrls": [
                "./component-props.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-props.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "props",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Array<ComponentProp>",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ComponentProp, PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n@Component({\r\n  selector: 'anu-component-props',\r\n  templateUrl: './component-props.component.html',\r\n  styleUrls: ['./component-props.component.scss']\r\n})\r\nexport class ComponentPropsComponent {\r\n  @Input() name: string = '';\r\n  @Input() type: string = '';\r\n  @Input() props: Array<ComponentProp> = [];\r\n\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-flow: wrap;\r\n\r\n    .prop-container{\r\n        border: 1px solid  var(--anu-secondary-lighter);\r\n        background-color: var(--anu-secondary-deep-light);\r\n        border-radius: calc(var(--anu-border-radius)/2);\r\n        padding: 0.5rem;\r\n        margin-bottom: 1.5rem;\r\n    }\r\n\r\n    table {\r\n        td {\r\n            vertical-align: bottom;\r\n            border: none;\r\n        }\r\n    }\r\n\r\n    h3 {\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    label {\r\n        border-bottom: 1px solid var(--anu-secondary-light);\r\n        font-weight: bold;\r\n        padding-bottom: 0;\r\n    }\r\n\r\n}\r\n",
                    "styleUrl": "./component-props.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "templateData": "<div class=\"prop-container shadow col-lg-6 col-md-12 col-sm-12\" *ngFor=\"let prop of props\">\r\n    <h3>{{type === propertyTypes.METHOD ? prop.name + '(...)': prop.name}}</h3>\r\n    <small *ngIf=\"prop.accessModifier\">{{prop.accessModifier}}</small>\r\n    <table>\r\n        <tbody>\r\n            <tr>\r\n                <td colspan=\"3\" [innerHtml]=\"prop.description\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td *ngIf=\"prop.type\"><label>Type</label><code>{{prop.type}}</code></td>\r\n                <td *ngIf=\"prop.defaultValue\"><label>Default value</label>{{prop.defaultValue}}</td>\r\n                <td *ngIf=\"prop.returnType\"><label>Return type</label><code>{{prop.returnType}}</code></td>\r\n            </tr>\r\n            <ng-container *ngIf=\"prop.args && prop.args.length\">\r\n                <tr>\r\n                    <td colspan=\"3\"><label>Arguments</label></td>\r\n                </tr>\r\n                <tr>\r\n                    <td colspan=\"3\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td><label>Name</label></td>\r\n                                    <td><label>Type</label></td>\r\n                                    <td><label>Default value</label></td>\r\n                                </tr>\r\n                                <tr *ngFor=\"let arg of prop.args\">\r\n                                    <td>{{arg.name}}</td>\r\n                                    <td><code>{{arg.type}}</code></td>\r\n                                    <td>{{arg.defaultValue}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n"
        },
        {
            "name": "ComponentUsageComponent",
            "id": "component-ComponentUsageComponent-72d961a70297b018d79c65fef56e47d2291dabceffbf7c1f3a264b4902510a280e24c9048c69ddc9164d6b44dd3f114a96823997586091b012e44afef7dde784",
            "file": "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-component-usage",
            "styleUrls": [
                "./component-usage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-usage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "componentData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent Usage sample data, usually comes from \"component-name.docs.ts\" file\npresent in the component's folder.\n",
                    "description": "<p>Component Usage sample data, usually comes from &quot;component-name.docs.ts&quot; file\npresent in the component&#39;s folder.</p>\n",
                    "line": 36,
                    "type": "DocsData",
                    "decorators": []
                },
                {
                    "name": "componentInfo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent info, that usually comes from the compdoc generated json.\n",
                    "description": "<p>Component info, that usually comes from the compdoc generated json.</p>\n",
                    "line": 27,
                    "type": "ComponentInfo",
                    "decorators": []
                },
                {
                    "name": "componentType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent Class, eg. MenuComponent, TabsComponent etc.\n",
                    "description": "<p>Component Class, eg. MenuComponent, TabsComponent etc.</p>\n",
                    "line": 31,
                    "type": "Type<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmpContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "<p>Container where the component renders.</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nContainer where the component renders.\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'vc', {static: true, read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "cmpContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<any>>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "cmpInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "cmpRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "inputPropsValues",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "outputPropResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "usageSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "buildUsageSource",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "clearOutputPropResults",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContentToProject",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputPropsChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setInputProps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setOutputProps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  Type,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { DocsData, DocsParserService, ComponentProp } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { ComponentInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n@Component({\r\n  selector: 'anu-component-usage',\r\n  templateUrl: './component-usage.component.html',\r\n  styleUrls: ['./component-usage.component.scss'],\r\n})\r\nexport class ComponentUsageComponent implements OnInit, OnChanges {\r\n  /**\r\n   * Component info, that usually comes from the compdoc generated json.\r\n   */\r\n  @Input() componentInfo: ComponentInfo = null;\r\n  /**\r\n   * Component Class, eg. MenuComponent, TabsComponent etc.\r\n   */\r\n  @Input() componentType: Type<any> = null;\r\n  /**\r\n   * Component Usage sample data, usually comes from \"component-name.docs.ts\" file\r\n   * present in the component's folder.\r\n   */\r\n  @Input() componentData: DocsData = null;\r\n  /**\r\n   * Container where the component renders.\r\n   */\r\n  @ViewChild('vc', { static: true, read: ViewContainerRef }) cmpContainer: ViewContainerRef;\r\n\r\n  cmpRef: ComponentRef<any>;\r\n  cmpInstance: any;\r\n  cmpContent: Array<Array<any>>;\r\n  usageSource: string;\r\n  outputPropResults: Array<any> = [];\r\n\r\n  // Properties Form Vars\r\n  inputPropsValues: any = {};\r\n\r\n  constructor(\r\n    @Inject(Renderer2) private readonly renderer: Renderer2,\r\n    private docsParserService: DocsParserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.renderComponent();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.renderComponent();\r\n  }\r\n\r\n  private renderComponent() {\r\n    this.cmpContainer.clear();\r\n    if (this.cmpRef) this.cmpRef.destroy();\r\n    this.cmpInstance = null;\r\n    this.inputPropsValues = {};\r\n    this.outputPropResults = [];\r\n\r\n    if (!this.componentInfo || !this.componentType) return;\r\n\r\n    this.cmpRef = this.cmpContainer.createComponent(this.componentType, {\r\n      index: 0,\r\n      projectableNodes: this.getContentToProject()\r\n    })\r\n\r\n    this.cmpInstance = this.cmpRef.instance;\r\n\r\n    // Init form InputProps\r\n    this.componentInfo.inputProps.forEach(prop => {\r\n      const propValue = this.componentData?.inputPropsValues?.[prop.name] || prop.defaultValue;\r\n      this.inputPropsValues[prop.name] = this.docsParserService.parsePropValueToStr(prop, propValue);\r\n    });\r\n\r\n    // Set Input props\r\n    this.setInputProps();\r\n    this.setOutputProps();\r\n    this.buildUsageSource();\r\n  }\r\n\r\n  private getContentToProject(): any {\r\n    const el = this.renderer.createElement('div');\r\n    el.innerHTML = this.componentData?.projectionContent || '';\r\n    const componentContent = [];\r\n    for (let chNode of el.childNodes) {\r\n      componentContent.push([chNode])\r\n    }\r\n\r\n    return componentContent;\r\n  }\r\n\r\n  private setInputProps() {\r\n    if (!this.componentInfo) return;\r\n    this.componentInfo.inputProps.map(prop => {\r\n      this.cmpInstance[prop.name] = this.docsParserService.parsePropValue(prop, this.inputPropsValues[prop.name]);\r\n    })\r\n\r\n    // Due to a Bug in angular, ngOnChanges() does not gets triggered for dynamically generated components. So we need to call it explicitly.\r\n    // But we can not pass changes param to it, so DO NOT use changes in your dynamically generated components.\r\n    if (this.cmpInstance['ngOnChanges']) this.cmpInstance['ngOnChanges']();\r\n  }\r\n\r\n  private setOutputProps() {\r\n    if (!this.componentInfo) return;\r\n    const outputProps = this.componentInfo.outputProps || [];\r\n\r\n    for (let prop of outputProps) {\r\n      this.cmpInstance[prop.name]\r\n      if (this.cmpInstance[prop.name]) this.cmpInstance[prop.name].unsubscribe();\r\n      this.cmpInstance[prop.name] = null;\r\n      this.cmpInstance[prop.name] = new EventEmitter<any>();\r\n      this.cmpInstance[prop.name].subscribe(result => {\r\n        let resultStr = '';\r\n        try {\r\n          resultStr = JSON.stringify(result, null, '\\t');\r\n        } catch (error: any) {\r\n          resultStr = result;\r\n        }\r\n        setTimeout(() => {\r\n          this.outputPropResults.push({ prop, resultStr });\r\n        });\r\n      })\r\n    }\r\n  }\r\n\r\n  private buildUsageSource(): string {\r\n    const componentInfo = this.componentInfo;\r\n\r\n    if (!componentInfo) return '';\r\n    // Open the tag\r\n    let usageSrc = `<${componentInfo.selector} `;\r\n\r\n    // Add Properties\r\n    componentInfo.inputProps.forEach(prop => {\r\n      const propVal = this.inputPropsValues[prop.name];\r\n      usageSrc += `\\n\\t[${prop.name}]='${propVal}'`\r\n    })\r\n\r\n    // add projectedContent source\r\n    const projectedContent = this.componentData?.projectionContent || '';\r\n    usageSrc += projectedContent ? `>\\n\\t${projectedContent}` : '>';\r\n\r\n    // Close the tag\r\n    usageSrc += `\\n</${componentInfo.selector}>`;\r\n    this.usageSource = usageSrc;\r\n\r\n    return usageSrc;\r\n  }\r\n\r\n  public inputPropsChanged(event: any, prop: ComponentProp): void {\r\n    if (prop.type === 'boolean') {\r\n      this.inputPropsValues[prop.name] = event;\r\n    }\r\n\r\n    this.buildUsageSource();\r\n    this.setInputProps();\r\n  }\r\n\r\n  public clearOutputPropResults(event: any): void {\r\n    event.preventDefault();\r\n    this.outputPropResults = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-top: 1rem;\r\n    padding-bottom: 1rem;\r\n\r\n    .output-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        min-height: 5rem;\r\n    }\r\n\r\n    .input-prop {\r\n        border-top: 1px solid var(--anu-secondary-dark);\r\n    }\r\n\r\n    .output-section {\r\n        width: -webkit-fill-available;\r\n        min-width: 75%;\r\n    }\r\n}\r\n",
                    "styleUrl": "./component-usage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<anu-collapsible [collapsed]=\"false\" [hamBurgerClassNames]=\"['size-md']\">\r\n    <anu-collapsible-header>Usage</anu-collapsible-header>\r\n    <anu-collapsible-content>\r\n        <anu-code-block [source]=\"usageSource\" language=\"markup\"></anu-code-block>\r\n    </anu-collapsible-content>\r\n</anu-collapsible>\r\n\r\n<div class=\"row nowrap-lg nowrap-md\">\r\n    <div class=\"spacing col-sm-12 output-section\">\r\n        <h2>Rendered Component</h2>\r\n        <section class=\"output-container relative\">\r\n            <ng-container #vc>\r\n            </ng-container>\r\n        </section>\r\n    </div>\r\n\r\n\r\n    <div class=\"spacing col-sm-12 secondary-lightest-bg shadow input-properties-section\">\r\n         <!-- Output Properties Form -->\r\n        <h2>Output Properties Subscriptions</h2>\r\n        <i>You can see results of Output property subscriptions</i>\r\n        <div *ngIf=\"outputPropResults && outputPropResults.length\" class=\"spacing-around-vertical\"><a href=\"#\"\r\n                (click)=\"clearOutputPropResults($event)\">Clear Output Results</a></div>\r\n        <ol class=\"spacing-around-vertical\">\r\n            <li class=\"input-prop spacing-around-vertical\" *ngFor=\"let propResult of outputPropResults\">\r\n                <label>{{propResult.prop.name}}(...)</label>\r\n                <textarea readonly [value]=\"propResult.resultStr\"></textarea>\r\n            </li>\r\n        </ol>\r\n         <!-- Input Properties Form -->\r\n        <h2>Input Properties</h2>\r\n        <i>Try changing below properties, and see the resulting effect in the Output section of the component.</i>\r\n        <div class=\"spacing-around-vertical\">\r\n            <div class=\"input-prop spacing-around-vertical\" *ngFor=\"let prop of componentInfo?.inputProps\">\r\n                <label>{{prop.name}}</label>\r\n                <anu-toggle *ngIf=\"prop.type === 'boolean'\" [checked]=\"inputPropsValues[prop.name]\" [rounded]=\"true\"\r\n                    (changed)=\"inputPropsChanged($event, prop)\"></anu-toggle>\r\n                <input *ngIf=\"['string', 'number'].includes(prop.type)\" type=\"text\"\r\n                    [(ngModel)]=\"inputPropsValues[prop.name]\" (blur)=\"inputPropsChanged($event, prop)\">\r\n                <textarea *ngIf=\"!['string', 'number', 'boolean'].includes(prop.type)\"\r\n                    [(ngModel)]=\"inputPropsValues[prop.name]\" (blur)=\"inputPropsChanged($event, prop)\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DirectiveInfoComponent",
            "id": "component-DirectiveInfoComponent-bed8f2c8892e8cfa0f09e94da967bb62259bebe0ee084aead71362738e052a2399ee551e068a7af6ef21610f534ea7dfcdb0568b9c7f3dd5d3d9c96b28fc406b",
            "file": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-directive-info",
            "styleUrls": [
                "./directive-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./directive-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "directiveInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "DirectiveInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tabs",
                    "defaultValue": "DIRECTIVE_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { DirectiveInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { DIRECTIVE_INFO_TABS } from '../../constants/directive-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n\r\n@Component({\r\n  selector: 'anu-directive-info',\r\n  templateUrl: './directive-info.component.html',\r\n  styleUrls: ['./directive-info.component.scss']\r\n})\r\nexport class DirectiveInfoComponent implements OnInit {\r\n  @Input() directiveInfo: DirectiveInfo;\r\n\r\n  tabs = DIRECTIVE_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[0];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .info-article {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./directive-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<anu-error *ngIf=\"!directiveInfo\" [code]=\"error?.code || 404\"\r\n    [message]=\"error?.message || 'Directive not found'\"></anu-error>\r\n<article class=\"info-article\">\r\n    <h1>{{directiveInfo?.name}}</h1>\r\n    <p [innerHtml]=\"directiveInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"directiveInfo?.inputProps && directiveInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"directiveInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"directiveInfo?.outputProps && directiveInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"directiveInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"directiveInfo?.props && directiveInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"directiveInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"directiveInfo?.methods && directiveInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"directiveInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <h2>{{directiveInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"directiveInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n\r\n</article>"
        },
        {
            "name": "GuardInfoComponent",
            "id": "component-GuardInfoComponent-81a4e815990862e361360d811fed0636850a0fe5df3f4eaed5fe3da041fcded9aa255087c28675cf70b60b6c14e8ec5a173a8fdcf3092c040b1d3c23fc38657b",
            "file": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-guard-info",
            "styleUrls": [
                "./guard-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./guard-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "guardInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "GuardInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tabs",
                    "defaultValue": "GUARD_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { GuardInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { GUARD_INFO_TABS } from '../../constants/guard-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n@Component({\r\n  selector: 'anu-guard-info',\r\n  templateUrl: './guard-info.component.html',\r\n  styleUrls: ['./guard-info.component.scss']\r\n})\r\nexport class GuardInfoComponent implements OnInit {\r\n  @Input() guardInfo: GuardInfo;\r\n\r\n  tabs = GUARD_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[0];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .info-article {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./guard-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<anu-error *ngIf=\"!guardInfo\" [code]=\"error?.code || 404\" [message]=\"error?.message || 'Guard not found'\"></anu-error>\r\n<article class=\"info-article\">\r\n    <h1>{{guardInfo?.name}}</h1>\r\n    <p [innerHtml]=\"guardInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"guardInfo?.inputProps && guardInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"guardInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"guardInfo?.outputProps && guardInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"guardInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"guardInfo?.props && guardInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"guardInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"guardInfo?.methods && guardInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"guardInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <h2>{{guardInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"guardInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n<anu-spinner [show]=\"loading\"></anu-spinner>"
        },
        {
            "name": "InterceptorInfoComponent",
            "id": "component-InterceptorInfoComponent-11504a983aaeeb509fa624a214f351a66b8c55912367620075bb6b6cfa181a9831b08fc240442c0e558db0d055e52dd140e248f8297b58a4518569fdea45ea3e",
            "file": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-interceptor-info",
            "styleUrls": [
                "./interceptor-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./interceptor-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "interceptorInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "InterceptorInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tabs",
                    "defaultValue": "INTERCEPTOR_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { InterceptorInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { INTERCEPTOR_INFO_TABS } from '../../constants/interceptor-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n\r\n@Component({\r\n  selector: 'anu-interceptor-info',\r\n  templateUrl: './interceptor-info.component.html',\r\n  styleUrls: ['./interceptor-info.component.scss']\r\n})\r\nexport class InterceptorInfoComponent implements OnInit {\r\n  @Input() interceptorInfo: InterceptorInfo;\r\n\r\n  tabs = INTERCEPTOR_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[0];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .info-article {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./interceptor-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<anu-error *ngIf=\"!interceptorInfo\" [code]=\"error?.code || 404\"\r\n    [message]=\"error?.message || 'Interceptor not found'\"></anu-error>\r\n<article class=\"info-article\">\r\n    <h1>{{interceptorInfo?.name}}</h1>\r\n    <p [innerHtml]=\"interceptorInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"interceptorInfo?.inputProps && interceptorInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"interceptorInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"interceptorInfo?.outputProps && interceptorInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"interceptorInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"interceptorInfo?.props && interceptorInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"interceptorInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"interceptorInfo?.methods && interceptorInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"interceptorInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <h2>{{interceptorInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"interceptorInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n<anu-spinner [show]=\"loading\"></anu-spinner>"
        },
        {
            "name": "InterfaceInfoComponent",
            "id": "component-InterfaceInfoComponent-07834fe617539c59bb810893c29cc499f9c0cfba675e99b683adef1ff1302d83ab4aa64ee86425c751595275e966068f23815471862e0d5d24f67236b2e8930c",
            "file": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-interface-info",
            "styleUrls": [
                "./interface-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./interface-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "interfaceInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "InterfaceInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tabs",
                    "defaultValue": "INTERFACE_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { InterfaceInfo } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { INTERFACE_INFO_TABS } from '../../constants/interface-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n@Component({\r\n  selector: 'anu-interface-info',\r\n  templateUrl: './interface-info.component.html',\r\n  styleUrls: ['./interface-info.component.scss']\r\n})\r\nexport class InterfaceInfoComponent implements OnInit {\r\n  @Input() interfaceInfo: InterfaceInfo;\r\n\r\n  tabs = INTERFACE_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[0];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    .info-article {\r\n        width: 100%;\r\n    }\r\n}",
                    "styleUrl": "./interface-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<anu-error *ngIf=\"!interfaceInfo\" [code]=\"error?.code || 404\"\r\n    [message]=\"error?.message || 'Interface not found'\"></anu-error>\r\n<article class=\"info-article\">\r\n    <h1>{{interfaceInfo?.name}}</h1>\r\n    <p [innerHtml]=\"interfaceInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n\r\n    </section>\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <h2>{{interfaceInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"interfaceInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n<anu-spinner [show]=\"loading\"></anu-spinner>"
        },
        {
            "name": "ServiceInfoComponent",
            "id": "component-ServiceInfoComponent-e54c41ead561658a5798672bf7be0acaf428a0070d904f4430aeb5ab71d29788437948dc695d186e15f890ba5c57da2fbd745620567e27a536efe4dbb1e71da7",
            "file": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-service-info",
            "styleUrls": [
                "./service-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./service-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "serviceInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nService Info, usually comes from parsed compdoc generated json.\n",
                    "description": "<p>Service Info, usually comes from parsed compdoc generated json.</p>\n",
                    "line": 18,
                    "type": "ServiceInfo",
                    "decorators": []
                },
                {
                    "name": "serviceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nService's class\n",
                    "description": "<p>Service&#39;s class</p>\n",
                    "line": 22,
                    "type": "Type<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[1]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filteredMethods",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentProp>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "methodErrors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "methodParameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "methodResponses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "propertyTypes",
                    "defaultValue": "PROPERTY_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "searchKeys",
                    "defaultValue": "['name', 'description']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "serviceInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tabs",
                    "defaultValue": "SERVICE_INFO_TABS.map(t => ({ ...t }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "initServiceInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "methodParametersChanged",
                    "args": [
                        {
                            "name": "params",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "method",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "ComponentProp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMethodSearch",
                    "args": [
                        {
                            "name": "filteredMethods",
                            "type": "Array<ComponentProp | Object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "filteredMethods",
                            "type": "Array<ComponentProp | Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tabChanged",
                    "args": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "Tab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, Input, OnInit, Type } from '@angular/core';\r\nimport { Tab } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { ServiceInfo, ComponentProp } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { SERVICE_INFO_TABS } from '../../constants/service-info.constants';\r\nimport { PROPERTY_TYPES } from '@annuadvent/ngx-lib-docs/docs-common';\r\nimport { DocsParserService } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n\r\n@Component({\r\n  selector: 'anu-service-info',\r\n  templateUrl: './service-info.component.html',\r\n  styleUrls: ['./service-info.component.scss']\r\n})\r\nexport class ServiceInfoComponent implements OnInit {\r\n  /**\r\n   * Service Info, usually comes from parsed compdoc generated json.\r\n   */\r\n  @Input() serviceInfo: ServiceInfo;\r\n  /**\r\n   * Service's class\r\n   */\r\n  @Input() serviceType: Type<any>;\r\n\r\n  tabs = SERVICE_INFO_TABS.map(t => ({ ...t }));\r\n  activeTab = this.tabs[1];\r\n  propertyTypes: typeof PROPERTY_TYPES = PROPERTY_TYPES;\r\n  filteredMethods: Array<ComponentProp> = [];\r\n  searchKeys = ['name', 'description'];\r\n  serviceInstance: any;\r\n  methodParameters: Array<any> = [];\r\n  methodResponses: Array<string> = [];\r\n  methodErrors: Array<any> = [];\r\n  loading: boolean = false;\r\n  error: any;\r\n\r\n  constructor(private docsParserService: DocsParserService, private injector: Injector) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initServiceInstance();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.initServiceInstance();\r\n  }\r\n\r\n  private initServiceInstance() {\r\n    this.filteredMethods = this.serviceInfo?.methods || [];\r\n    // Set Service Instance\r\n    if (this.serviceInfo && this.serviceType) {\r\n      this.serviceInstance = this.injector.get<any>(this.serviceType);\r\n    } else {\r\n      this.serviceInstance = null;\r\n    }\r\n  }\r\n\r\n\r\n  public tabChanged(tab: Tab) {\r\n    this.activeTab = tab;\r\n  }\r\n\r\n  public onMethodSearch(filteredMethods: Array<ComponentProp | Object>): void {\r\n    this.filteredMethods = filteredMethods as Array<ComponentProp>;\r\n  }\r\n\r\n  public methodParametersChanged(params: Array<any>, method: ComponentProp): void {\r\n    this.methodParameters = params;\r\n\r\n    const argValues = params.map(p => this.docsParserService.parsePropValue(p, p.value));\r\n\r\n    const returnOfFunction = this.serviceInstance[method.name](...argValues);\r\n    if (method.returnType.includes('Observable')) {\r\n      returnOfFunction.subscribe(res => {\r\n        delete this.methodErrors[method.name];\r\n        this.methodResponses[method.name] = JSON.stringify(res, null, '\\t');\r\n      })\r\n        .catch(error => {\r\n          this.methodErrors[method.name] = error;\r\n          delete this.methodResponses[method.name];\r\n        })\r\n    } else if (method.returnType.includes('Promise')) {\r\n      returnOfFunction.then(res => {\r\n        delete this.methodErrors[method.name];\r\n        this.methodResponses[method.name] = JSON.stringify(res, null, '\\t');\r\n      }, error => {\r\n        this.methodErrors[method.name] = error;\r\n        delete this.methodResponses[method.name];\r\n      })\r\n    } else {\r\n      this.methodResponses[method.name] = JSON.stringify(returnOfFunction, null, '\\t');\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    h2 {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    .method-card {\r\n        margin: 2rem 0;\r\n        border: 1px solid var(--anu-primary-light);\r\n    }\r\n\r\n    anu-search-box {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    anu-card {\r\n        overflow-x: auto;\r\n    }\r\n\r\n    .serviceinfo-article {\r\n        width: 100%;\r\n    }\r\n\r\n    h1 {\r\n        word-wrap: break-word;\r\n    }\r\n}",
                    "styleUrl": "./service-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "docsParserService",
                        "type": "DocsParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<anu-error *ngIf=\"!serviceInfo\" [code]=\"error?.code || 404\"\r\n    [message]=\"error?.message || 'Service not found'\"></anu-error>\r\n<article class=\"serviceinfo-article\">\r\n    <h1>{{serviceInfo?.name}}</h1>\r\n    <p [innerHtml]=\"serviceInfo?.description\"></p>\r\n    <anu-tabs [tabs]=\"tabs\" [activeTab]=\"activeTab\" (changed)=\"tabChanged($event)\"></anu-tabs>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[0].name\">\r\n        <ng-container *ngIf=\"serviceInfo?.inputProps && serviceInfo?.inputProps.length\">\r\n            <h2>Input Properties</h2>\r\n            <anu-component-props [props]=\"serviceInfo?.inputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"serviceInfo?.outputProps && serviceInfo?.outputProps.length\">\r\n            <h2>Output Properties / Events</h2>\r\n            <anu-component-props [props]=\"serviceInfo?.outputProps\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"serviceInfo?.props && serviceInfo?.props.length\">\r\n            <h2>Properties</h2>\r\n            <anu-component-props [props]=\"serviceInfo?.props\"></anu-component-props>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"serviceInfo?.methods && serviceInfo?.methods.length\">\r\n            <h2>Methods</h2>\r\n            <anu-component-props [props]=\"serviceInfo?.methods\" [type]=\"propertyTypes.METHOD\"></anu-component-props>\r\n        </ng-container>\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[1].name\">\r\n        <p>You can run your service methods and see their output.\r\n            Below screen provides you the input boxes to enter your method argument values.</p>\r\n        <anu-search-box [items]=\"serviceInfo?.methods\" [keys]=\"searchKeys\" (changed)=\"onMethodSearch($event)\"\r\n            placeholder=\"service method name...\">\r\n        </anu-search-box>\r\n        <label>Results: {{filteredMethods?.length || 0}} of {{serviceInfo?.methods?.length || 0}}</label>\r\n        <ng-container *ngFor=\"let fn of filteredMethods\">\r\n            <anu-card class=\"method-card shadow spacing\">\r\n                <anu-card-body>\r\n                    <anu-collapsible [collapsed]=\"false\" [hamBurgerClassNames]=\"['size-sm']\">\r\n                        <anu-collapsible-header>\r\n                            <a href=\"javascript:void(0)\">\r\n                                {{fn.name}}(...)\r\n                            </a>\r\n                        </anu-collapsible-header>\r\n                        <anu-collapsible-content>\r\n                            <anu-card>\r\n                                <anu-card-body>\r\n                                    <p [innerHtml]=\"fn.description\"></p>\r\n                                    <anu-service-method [method]=\"fn\"\r\n                                        (changed)=\"methodParametersChanged($event, fn)\"></anu-service-method>\r\n                                    <anu-error *ngIf=\"methodErrors[fn.name]\" [code]=\"methodErrors[fn.name].code\"\r\n                                        [message]=\"methodErrors[fn.name].message\"></anu-error>\r\n                                    <anu-collapsible *ngIf=\"methodResponses[fn.name]\"\r\n                                        [hamBurgerClassNames]=\"['size-sm']\">\r\n                                        <anu-collapsible-header>\r\n                                            <a href=\"javascript:void(0)\">Method response</a>\r\n                                        </anu-collapsible-header>\r\n                                        <anu-collapsible-content>\r\n                                            <anu-code-block [source]=\"methodResponses[fn.name]\">\r\n                                            </anu-code-block>\r\n                                        </anu-collapsible-content>\r\n                                    </anu-collapsible>\r\n                                </anu-card-body>\r\n                            </anu-card>\r\n                        </anu-collapsible-content>\r\n                    </anu-collapsible>\r\n                </anu-card-body>\r\n            </anu-card>\r\n        </ng-container>\r\n\r\n    </section>\r\n\r\n    <section *ngIf=\"activeTab.name === tabs[2].name\">\r\n        <h2>{{serviceInfo?.tsUrl}}</h2>\r\n        <anu-code-block [source]=\"serviceInfo?.tsSource\"></anu-code-block>\r\n    </section>\r\n</article>\r\n<anu-spinner [show]=\"loading\"></anu-spinner>\r\n"
        },
        {
            "name": "ServiceMethodComponent",
            "id": "component-ServiceMethodComponent-bdf043bd3c1c6ddf47d49bf5648a2dc95734e001c381d92edef2d64dad3635b09b3bab92b32a050e6bd66b7dba5aca6153a18a31dbfc516d3c4c4703036cc03f",
            "file": "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "anu-service-method",
            "styleUrls": [
                "./service-method.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./service-method.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "method",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ComponentProp",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter<Array<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<Array<any>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "initValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { ComponentProp } from '@annuadvent/ngx-lib-docs/docs-common';\r\n\r\n\r\n@Component({\r\n  selector: 'anu-service-method',\r\n  templateUrl: './service-method.component.html',\r\n  styleUrls: ['./service-method.component.scss']\r\n})\r\nexport class ServiceMethodComponent implements OnInit, OnChanges {\r\n  @Input() method: ComponentProp = null;\r\n  @Output() changed: EventEmitter<Array<any>> = new EventEmitter<Array<any>>();\r\n\r\n  parameters: Array<any> = []\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.initValues();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.initValues();\r\n  }\r\n\r\n  private initValues() {\r\n    this.parameters = this.method.args.map(arg => ({ ...arg, value: arg.defaultValue }));\r\n  }\r\n\r\n  public onChange(event: any): void {\r\n    event.preventDefault();\r\n    this.changed.emit([...this.parameters]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./service-method.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<anu-card>\r\n    <anu-card-title>\r\n        <label>\r\n            <span>{{method?.accessModifier}}</span>\r\n            <span> {{method?.name}}(</span>\r\n            <span *ngFor=\"let arg of method?.args; let index = index\">\r\n                <span>{{arg.name}}</span>\r\n                <span *ngIf=\"arg.type\">: {{arg.type}}</span>\r\n                <span *ngIf=\"arg.defaultValue\"> = {{arg.defaultValue}}</span>\r\n                <span *ngIf=\"(method?.args.length - 1) !==  index\">, </span>\r\n            </span>\r\n            <span>)</span>\r\n            <span *ngIf=\"method?.returnType\">: {{method?.returnType}}</span>\r\n        </label>\r\n    </anu-card-title>\r\n</anu-card>\r\n<div *ngFor=\"let arg of parameters; let index = index\">\r\n    <label>{{arg.name}}</label>\r\n    <textarea [(ngModel)]=\"arg.value\"></textarea>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-12 center\">\r\n        <a href=\"#\" class=\"btn\" (click)=\"onChange($event)\">Execute</a>\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "ClassInfoModule",
            "id": "module-ClassInfoModule-28f24777b09c38ed7dc84af72ce019ccdf025ae129442b9f37068b6782e427ab1cb5d232798d3fd3d74c56dfdf9f13d850a9fbd27866c14db87228f84f664cd8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/class-info/src/class-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClassInfoComponent } from './components/class-info/class-info.component';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ClassInfoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    SpinnerModule,\r\n    ErrorModule,\r\n    CodeBlockModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    ClassInfoComponent\r\n  ],\r\n})\r\nexport class ClassInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentInfoModule",
            "id": "module-ComponentInfoModule-a94d262e3a7b60d2524b70cce793ebd76fba79925ce2e9259e113ff3dc0cb5e7a569a86f806552f91b97225f76c3b32da0a3b1b48374e501f5ff6f9a2aae12bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/component-info/src/component-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { CardModule } from '@annuadvent/ngx-common-ui/card';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { ComponentInfoComponent } from './components/component-info/component-info.component';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\nimport { CollapsibleModule } from '@annuadvent/ngx-common-ui/collapsible';\r\nimport { ToggleModule } from '@annuadvent/ngx-common-ui/toggle';\r\nimport { ComponentUsageComponent } from './components/component-usage/component-usage.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ComponentInfoComponent,\r\n    ComponentUsageComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TabsModule,\r\n    CardModule,\r\n    CodeBlockModule,\r\n    ErrorModule,\r\n    CollapsibleModule,\r\n    ToggleModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    ComponentInfoComponent,\r\n    ComponentUsageComponent,\r\n  ],\r\n})\r\nexport class ComponentInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentPropsModule",
            "id": "module-ComponentPropsModule-ce9a9c59cba2b69caecd7ebb9075674faf6a84fdfa270f73f5dfb9d26c3354a00b3c5afaa080630e033a24f44b804a44b23cb0ea604fa75d58a565058fdea0d0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/component-props/src/component-props.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ComponentPropsComponent } from './components/component-props/component-props.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ComponentPropsComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [ComponentPropsComponent],\r\n})\r\nexport class ComponentPropsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectiveInfoModule",
            "id": "module-DirectiveInfoModule-6628afb244b3e48235db1f5614d56b6e52dca73e3891a5e675f3ab2d21e7ea139dafc931b5ee18980c9eabb772ec463f7a41e9040e58760e4c2d5f69b7f23974",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/directive-info/src/directive-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DirectiveInfoComponent } from './components/directive-info/directive-info.component';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DirectiveInfoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    SpinnerModule,\r\n    ErrorModule,\r\n    CodeBlockModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    DirectiveInfoComponent\r\n  ],\r\n})\r\nexport class DirectiveInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsCommonModule",
            "id": "module-DocsCommonModule-244a0760dc3fd0fd328445389bb632f4bd67169bee478c6b25c7f7ef0e1bb3f4917ec5d7c3ba4b52f477d5287db8372ee6d870f989c48a7c9afb5913898f0682",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/docs-common/src/docs-common.module.ts",
            "methods": [],
            "sourceCode": "\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UtilsModule } from '@annuadvent/ngx-core/utils';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    UtilsModule,\r\n    HttpClientModule,\r\n  ]\r\n})\r\nexport class DocsCommonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GuardInfoModule",
            "id": "module-GuardInfoModule-7f94fec70ce5a0a2dc2e0ac15748f55bfa54dc03f94cf6f986c9bfcb352339050af4b77bb0736be17706d434bb09c5f6b1e26fb3913e25a562b6579ff6ff5867",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/guard-info/src/guard-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GuardInfoComponent } from './components/guard-info/guard-info.component';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GuardInfoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    SpinnerModule,\r\n    ErrorModule,\r\n    CodeBlockModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    GuardInfoComponent\r\n  ],\r\n})\r\nexport class GuardInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InterceptorInfoModule",
            "id": "module-InterceptorInfoModule-fdbd1e3178ecc2efc17b08087b5bcbfdaee2fa939cd5bacb4ced96749b4edeb30d64df57b93112b0e8ca47a5ff0178b29fa1dbf7815116d2df8863e2ffcf3f31",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/interceptor-info/src/interceptor-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InterceptorInfoComponent } from './components/interceptor-info/interceptor-info.component';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InterceptorInfoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    SpinnerModule,\r\n    ErrorModule,\r\n    CodeBlockModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    InterceptorInfoComponent\r\n  ],\r\n})\r\nexport class InterceptorInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InterfaceInfoModule",
            "id": "module-InterfaceInfoModule-77f3d5a67188431cbc8e4d0a2bd39922d1702a23942aece68f84c2145de164caae0317bfd4736fadcbc5cd984e261a591b223357d2d874d6a3a61bd8211553e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/interface-info/src/interface-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InterfaceInfoComponent } from './components/interface-info/interface-info.component';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\nimport { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InterfaceInfoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    SpinnerModule,\r\n    ErrorModule,\r\n    CodeBlockModule,\r\n    ComponentPropsModule,\r\n  ],\r\n  exports: [\r\n    InterfaceInfoComponent\r\n  ],\r\n})\r\nexport class InterfaceInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServiceInfoModule",
            "id": "module-ServiceInfoModule-c6ebd9d8208430dba2b34e6eea614ab2d28a3241fd44c00c6c90b70987095d6a6aea21300720148f863c6dcf5850f46d99ae2a7b42e4ad3184d29ec06cf793df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/service-info/src/service-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; import { TabsModule } from '@annuadvent/ngx-common-ui/tabs';\r\nimport { CardModule } from '@annuadvent/ngx-common-ui/card';\r\nimport { CodeBlockModule } from '@annuadvent/ngx-common-ui/code-block';\r\nimport { SearchBoxModule } from '@annuadvent/ngx-common-ui/search-box';\r\nimport { ErrorModule } from '@annuadvent/ngx-common-ui/error';\r\nimport { CollapsibleModule } from '@annuadvent/ngx-common-ui/collapsible';\r\nimport { SpinnerModule } from '@annuadvent/ngx-common-ui/spinner';\r\nimport { ServiceInfoComponent } from './components/service-info/service-info.component';\r\nimport { ServiceMethodModule } from '@annuadvent/ngx-lib-docs/service-method';\r\nimport { ComponentPropsModule } from '@annuadvent/ngx-lib-docs/component-props';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ServiceInfoComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TabsModule,\r\n    CardModule,\r\n    CodeBlockModule,\r\n    SearchBoxModule,\r\n    ServiceMethodModule,\r\n    ComponentPropsModule,\r\n    ErrorModule,\r\n    CollapsibleModule,\r\n    SpinnerModule,\r\n  ],\r\n  exports: [ServiceInfoComponent],\r\n})\r\nexport class ServiceInfoModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ServiceMethodModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServiceMethodModule",
            "id": "module-ServiceMethodModule-9493b23d64dd8779cfd5f94c104fe7945ebfa75df5f860a3813a6ab2594a298bd5bc6a20aa95000778771a4462282de827ca1b6313f69879a4a1d3733bd293ea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-lib-docs/service-method/src/service-method.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CardModule } from '@annuadvent/ngx-common-ui/card';\r\nimport { ServiceMethodComponent } from './components/service-method/service-method.component';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ServiceMethodComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    CardModule,\r\n    FormsModule,\r\n  ],\r\n  exports: [\r\n    ServiceMethodComponent\r\n  ]\r\n})\r\nexport class ServiceMethodModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCESS_MODIFIERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    121: 'private',\r\n    122: 'protected',\r\n    123: 'public',\r\n}"
            },
            {
                "name": "CLASS_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/class-info/src/constants/class-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "CLASS_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/service-method/src/constants/class-method.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "classInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"FirebaseConfig\",\r\n    \"description\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/firebase/firebase.interface.ts\",\r\n    \"tsSource\": \"export class FirebaseConfig {\\r\\n    public projectId? = '';\\r\\n    public appId? = '';\\r\\n    public storageBucket? = '';\\r\\n    public locationId? = '';\\r\\n    public apiKey? = '';\\r\\n    public authDomain? = '';\\r\\n    public messagingSenderId? = '';\\r\\n    public measurementId? = '';\\r\\n}\\r\\n\\r\\n\\r\\nexport interface QueryConfig {\\r\\n    userId?: string;\\r\\n    id?: string | Array<string>;\\r\\n    articleCategoryId?: string | Array<string>;\\r\\n    orderField?: string;\\r\\n    isDesc?: boolean;\\r\\n    isForwardDir?: boolean;\\r\\n    startPage?: any;\\r\\n    pageSize?: number;\\r\\n    isLive?: boolean | null;\\r\\n  };\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [\r\n        {\r\n            \"name\": \"apiKey\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"appId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"authDomain\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"locationId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"measurementId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"messagingSenderId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"projectId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"storageBucket\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ],\r\n    \"methods\": []\r\n}"
            },
            {
                "name": "ClassInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        classInfo\r\n    }\r\n}"
            },
            {
                "name": "COMMPONENT_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/component-info/src/constants/component-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'usage',\r\n        title: 'Usage',\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n    {\r\n        name: 'html',\r\n        title: 'Html',\r\n    },\r\n    {\r\n        name: 'styles',\r\n        title: 'Scss',\r\n    }\r\n]"
            },
            {
                "name": "componentInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"ToolbarComponent\",\r\n    \"description\": \"\",\r\n    \"selector\": \"anu-toolbar\",\r\n    \"styleUrl\": \"./toolbar.component.scss\",\r\n    \"styleSource\": \"$icon-mage-size: 2rem;\\r\\n\\r\\nnav.annuToolbar {\\r\\n    display: flex;\\r\\n\\r\\n    ul {\\r\\n        display: inline-block;\\r\\n        list-style-type: none;\\r\\n        white-space: nowrap;\\r\\n        width: max-content;\\r\\n        padding: 0;\\r\\n        margin: 0;\\r\\n        background-color: var(--anu-primary-lightest);\\r\\n        border: 1px solid var(--anu-primary-normal);\\r\\n        border-radius: calc(var(--anu-border-radius)/2);\\r\\n\\r\\n        li {\\r\\n            display: inline-block;\\r\\n\\r\\n            a {\\r\\n                display: inline-block;\\r\\n                padding: 0.3rem 1rem;\\r\\n                color: var(--anu-accent-darkest);\\r\\n                vertical-align: middle;\\r\\n\\r\\n                &:hover {\\r\\n                    background-color: var(--anu-primary-light);\\r\\n                }\\r\\n\\r\\n                img {\\r\\n                    width: #{$icon-mage-size};\\r\\n                    height: #{$icon-mage-size};\\r\\n                    vertical-align: middle;\\r\\n                    margin: 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        li + li {\\r\\n            border-left: 1px solid var(--anu-primary-light);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &.vertical {\\r\\n        ul {\\r\\n            display: flex;\\r\\n            flex-direction: column;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\r\n    \"templateUrl\": \"./toolbar.component.html\",\r\n    \"templateSource\": \"<nav role=\\\"toolbar\\\" class=\\\"annuToolbar\\\" [ngClass]=\\\"{'vertical': isVertical}\\\">\\r\\n    <ul class=\\\"shadow\\\">\\r\\n        <li *ngFor=\\\"let item of items\\\">\\r\\n            <a [href]=\\\"item.href\\\" [title]=\\\"item.title\\\" (click)=\\\"itemClicked($event, item)\\\">\\r\\n                <span *ngIf=\\\"item.icon\\\" class=\\\"annuToolbar_icon\\\" [innerHtml]=\\\"item.icon\\\"></span>\\r\\n                <img *ngIf=\\\"item.iconImage\\\" class=\\\"annuToolbar_iconimage\\\" [src]=\\\"item.iconImage\\\" [alt]=\\\"item.title\\\"/>\\r\\n                <span *ngIf=\\\"item.label\\\" class=\\\"annuToolbar_label\\\">{{item.label}}</span>\\r\\n            </a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</nav>\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/components/common-ui/toolbar/toolbar.component.ts\",\r\n    \"tsSource\": \"import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\\r\\nimport { ToolbarItem } from '.';\\r\\n\\r\\n@Component({\\r\\n  selector: 'anu-toolbar',\\r\\n  templateUrl: './toolbar.component.html',\\r\\n  styleUrls: ['./toolbar.component.scss']\\r\\n})\\r\\nexport class ToolbarComponent implements OnInit {\\r\\n  @Input() items: Array<ToolbarItem> = [];\\r\\n  @Input() isVertical: boolean = false;\\r\\n\\r\\n  @Output() changed = new EventEmitter<ToolbarItem>();\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n\\r\\n  public itemClicked(event: any, item: ToolbarItem): void {\\r\\n    if (!item.href) {\\r\\n      event.preventDefault();\\r\\n    }\\r\\n\\r\\n    this.changed.emit(item);\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [\r\n        {\r\n            \"name\": \"isVertical\",\r\n            \"type\": \"boolean\",\r\n            \"defaultValue\": \"false\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"items\",\r\n            \"type\": \"Array<ToolbarItem>\",\r\n            \"defaultValue\": \"[]\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"outputProps\": [\r\n        {\r\n            \"name\": \"changed\",\r\n            \"type\": \"EventEmitter\",\r\n            \"defaultValue\": \"new EventEmitter<ToolbarItem>()\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"itemClicked\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"event\",\r\n                    \"type\": \"any\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"item\",\r\n                    \"type\": \"ToolbarItem\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"ngOnInit\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        }\r\n    ]\r\n}"
            },
            {
                "name": "ComponentInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        componentInfo\r\n    }\r\n}"
            },
            {
                "name": "ComponentPropsComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        props: [\r\n            {\r\n                \"name\": \"nextPage\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"pageCount\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"previousPage\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"rangePages\",\r\n                \"type\": \"Array<number>\",\r\n                \"defaultValue\": \"[]\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}"
            },
            {
                "name": "ComponentUsageComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {}\r\n}"
            },
            {
                "name": "DIRECTIVE_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/directive-info/src/constants/directive-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "directiveInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"FocusDirective\",\r\n    \"description\": \"\",\r\n    \"selector\": \"[focus]\",\r\n    \"styleUrl\": \"\",\r\n    \"styleSource\": \"\",\r\n    \"templateUrl\": \"\",\r\n    \"templateSource\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/components/cms/content-editor/directives/focus.directive.ts\",\r\n    \"tsSource\": \"import { Directive, ElementRef, EventEmitter, Inject, Input, Output } from '@angular/core';\\r\\n\\r\\n@Directive({\\r\\n  selector: '[focus]'\\r\\n})\\r\\nexport class FocusDirective {\\r\\n  @Input() focus: boolean;\\r\\n  @Output() onFocus = new EventEmitter();\\r\\n\\r\\n  constructor(@Inject(ElementRef) private element: ElementRef) { }\\r\\n\\r\\n  protected ngOnChanges() {\\r\\n    if (this.focus === true ) this.element.nativeElement.focus();    \\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [\r\n        {\r\n            \"name\": \"focus\",\r\n            \"type\": \"boolean\",\r\n            \"defaultValue\": \"\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"outputProps\": [\r\n        {\r\n            \"name\": \"onFocus\",\r\n            \"type\": \"EventEmitter\",\r\n            \"defaultValue\": \"new EventEmitter()\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"ngOnChanges\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"protected\"\r\n        }\r\n    ]\r\n}"
            },
            {
                "name": "DirectiveInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        directiveInfo\r\n    }\r\n}"
            },
            {
                "name": "GUARD_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/guard-info/src/constants/guard-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "guardInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"IsLoggedInGuard\",\r\n    \"description\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/services/route-guards/is-logged-in.guard.ts\",\r\n    \"tsSource\": \"import { Injectable } from '@angular/core';\\r\\nimport {\\r\\n  CanActivate,\\r\\n  ActivatedRouteSnapshot,\\r\\n  RouterStateSnapshot,\\r\\n  Router,\\r\\n  CanActivateChild,\\r\\n  UrlTree\\r\\n} from '@angular/router';\\r\\nimport { AuthFirebaseService } from '../../firebase/auth/auth-firebase.service';\\r\\n\\r\\n\\r\\n@Injectable()\\r\\nexport class IsLoggedInGuard implements CanActivate, CanActivateChild {\\r\\n\\r\\n  constructor(private authFireSvc: AuthFirebaseService,\\r\\n    private router: Router) { }\\r\\n\\r\\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\\r\\n    const loginUrl = route?.data['loginUrl'] || '/login';\\r\\n    const urlTree = this.router.parseUrl(`${loginUrl}?returnUrl=${state.url}`);\\r\\n    return this.checkUserLoggedIn(urlTree);\\r\\n  }\\r\\n\\r\\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\\r\\n    const loginUrl = route?.data['loginUrl'] || '/login';\\r\\n    const urlTree = this.router.parseUrl(`${loginUrl}?returnUrl=${state.url}`);\\r\\n    return this.checkUserLoggedIn(urlTree);\\r\\n  }\\r\\n\\r\\n  public checkUserLoggedIn(urlTree: UrlTree): Promise<boolean | UrlTree> {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      if (this.authFireSvc.isLoggedIn()) {\\r\\n        resolve(true);\\r\\n      } else if(!this.authFireSvc.isLoggedInFromLocalStorage()) {\\r\\n        resolve(urlTree);\\r\\n      } else {\\r\\n        this.authFireSvc.authStateChanged().subscribe(user => {\\r\\n          if (user) {\\r\\n            resolve(true);\\r\\n          } else {\\r\\n            resolve(urlTree);\\r\\n          }\\r\\n        })\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"canActivate\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"route\",\r\n                    \"type\": \"ActivatedRouteSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"state\",\r\n                    \"type\": \"RouterStateSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"canActivateChild\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"route\",\r\n                    \"type\": \"ActivatedRouteSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"state\",\r\n                    \"type\": \"RouterStateSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"checkUserLoggedIn\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"urlTree\",\r\n                    \"type\": \"UrlTree\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ]\r\n}"
            },
            {
                "name": "GuardInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        guardInfo\r\n    }\r\n}"
            },
            {
                "name": "INTERCEPTOR_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interceptor-info/src/constants/interceptor-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "interceptorInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "InterceptorInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        interceptorInfo\r\n    }\r\n}"
            },
            {
                "name": "INTERFACE_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interface-info/src/constants/interface-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "interfaceInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"ArticlesHomeViewRouteData\",\r\n    \"id\": \"interface-ArticlesHomeViewRouteData-c5809e9d52b7eac963fc776183a8703e5083e4901d19a05b0687e7b834d74147333734a3c7641ce1eb6bc0494ac23f42ee404205c60e21ff42a244a3526dbece\",\r\n    \"file\": \"projects/annu-ng-lib/src/lib/services/articles-route-resolvers/articles-route-resolvers.interface.ts\",\r\n    \"deprecated\": false,\r\n    \"deprecationMessage\": \"\",\r\n    \"type\": \"interface\",\r\n    \"sourceCode\": \"import { Article } from \\\"../../components/cms\\\";\\r\\nimport { PageCategoryGroup } from \\\"../../firebase\\\";\\r\\n\\r\\nexport interface ArticlesHomeViewRouteData {\\r\\n    pageCategoryGroups?: Array<PageCategoryGroup>;\\r\\n}\\r\\n\\r\\nexport interface CategoryViewRouteData {\\r\\n    pageCategoryGroup?: PageCategoryGroup;\\r\\n    pageCategoryGroups?: Array<PageCategoryGroup>;\\r\\n}\\r\\n\\r\\nexport interface ArticleViewRouteData {\\r\\n    article?: Article\\r\\n}\\r\\n\\r\\nexport enum PageDirection {\\r\\n    FORWARD = 'f',\\r\\n    BACKWARD = 'b'\\r\\n};\\r\\n\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"pageCategoryGroups\",\r\n            \"deprecated\": false,\r\n            \"deprecationMessage\": \"\",\r\n            \"type\": \"Array<PageCategoryGroup>\",\r\n            \"optional\": true,\r\n            \"description\": \"\",\r\n            \"line\": 5\r\n        }\r\n    ],\r\n    \"indexSignatures\": [],\r\n    \"kind\": 165,\r\n    \"methods\": []\r\n}"
            },
            {
                "name": "InterfaceInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        interfaceInfo\r\n    }\r\n}"
            },
            {
                "name": "LIB_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/public-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ngx-lib-docs'"
            },
            {
                "name": "PROPERTY_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    METHOD: 'methodsClass',\r\n    INPUT_PROPERTY: 'inputsClass',\r\n    OUTPUT_PROPERTY: 'outputsClass',\r\n    PROPERTY: 'properties',\r\n}"
            },
            {
                "name": "SERVICE_INFO_TABS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/service-info/src/constants/service-info.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Tab>",
                "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'playground',\r\n        title: 'Playground',\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
            },
            {
                "name": "ServiceInfoComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        serviceInfo: svcInfo\r\n    }\r\n}"
            },
            {
                "name": "ServiceMethodComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        method: {\r\n            \"name\": \"getCssVar\",\r\n            \"returnType\": \"CssVar\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"name\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"description\": \"Returns the CSS variable name\",\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "svcInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"name\": \"UtilsService\",\r\n    \"description\": \"<p>UtilsService exports all the methods that provides some common utility.</p>\\n\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/services/utils/utils.service.ts\",\r\n    \"tsSource\": \"import { Injectable } from '@angular/core';\\r\\n\\r\\n\\r\\n/**\\r\\n * UtilsService exports all the methods that provides some common utility.\\r\\n *\\r\\n * @export\\r\\n * @class UtilsService\\r\\n * @typedef {UtilsService}\\r\\n */\\r\\n@Injectable()\\r\\nexport class UtilsService {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  /**\\r\\n   * Returns the current Date from browser in the ISO format.\\r\\n   *\\r\\n   * @public\\r\\n   * @readonly\\r\\n   * @type {string}\\r\\n   */\\r\\n  public get currentDate(): string {\\r\\n    return (new Date()).toISOString();\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Returns a local date string\\r\\n   * @date 26/2/2022 - 9:48:21 am\\r\\n   *\\r\\n   * @public\\r\\n   * @param {string} date\\r\\n   * @returns {string}\\r\\n   */\\r\\n  public dateToLocalString(date: string = ''): string {\\r\\n    if (!date) return '';\\r\\n    const options: any = { year: 'numeric', month: 'short', day: 'numeric' };\\r\\n    const dt = new Date(date);\\r\\n    return dt.toLocaleDateString('en-US', options);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Converts a string into dashed string. All spaces are replaced with dashes.\\r\\n   * This converted string can be used for getting a unique name for a title of any content like, article etc.\\r\\n   *\\r\\n   * @param title\\r\\n   * @returns\\r\\n   */\\r\\n  public toDashedString(title: string = ''): string {\\r\\n    return title.split(' ').join('-').toLocaleLowerCase();\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Scrolls the page to the desired top position.\\r\\n   * @date 25/2/2022 - 5:28:11 pm\\r\\n   *\\r\\n   * @public\\r\\n   * @param {number} top\\r\\n   */\\r\\n  public scrollTo(top: number = 0) {\\r\\n    if (typeof window !== 'undefined') {\\r\\n      window.scrollTo({ top: top });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  public getTrimmedStringByChars(str: string, count: number = 0): string {\\r\\n    if (!str || typeof str !== 'string' || !count || count <= 0) {\\r\\n      return str;\\r\\n    }\\r\\n\\r\\n    return str.substring(0, count) + '...';\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"dateToLocalString\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"date\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Returns a local date string</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"getTrimmedStringByChars\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"str\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"count\",\r\n                    \"type\": \"number\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"0\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"scrollTo\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"top\",\r\n                    \"type\": \"number\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"0\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Scrolls the page to the desired top position.</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"toDashedString\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"title\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Converts a string into dashed string. All spaces are replaced with dashes.\\nThis converted string can be used for getting a unique name for a title of any content like, article etc.</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "LibAssetInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo",
                "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "LibAssetTypeEnums",
                "childs": [
                    {
                        "name": "components",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "components"
                    },
                    {
                        "name": "services",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "services"
                    },
                    {
                        "name": "directives",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "directives"
                    },
                    {
                        "name": "interfaces",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "interfaces"
                    },
                    {
                        "name": "guards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "guards"
                    },
                    {
                        "name": "classes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "classes"
                    },
                    {
                        "name": "interceptors",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "interceptors"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/ngx-lib-docs/docs-common/src/enums/docs-info.enums.ts"
            }
        ],
        "groupedVariables": {
            "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts": [
                {
                    "name": "ACCESS_MODIFIERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    121: 'private',\r\n    122: 'protected',\r\n    123: 'public',\r\n}"
                },
                {
                    "name": "PROPERTY_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    METHOD: 'methodsClass',\r\n    INPUT_PROPERTY: 'inputsClass',\r\n    OUTPUT_PROPERTY: 'outputsClass',\r\n    PROPERTY: 'properties',\r\n}"
                }
            ],
            "projects/ngx-lib-docs/class-info/src/constants/class-info.constants.ts": [
                {
                    "name": "CLASS_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/class-info/src/constants/class-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/service-method/src/constants/class-method.constants.ts": [
                {
                    "name": "CLASS_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/service-method/src/constants/class-method.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts": [
                {
                    "name": "classInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"FirebaseConfig\",\r\n    \"description\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/firebase/firebase.interface.ts\",\r\n    \"tsSource\": \"export class FirebaseConfig {\\r\\n    public projectId? = '';\\r\\n    public appId? = '';\\r\\n    public storageBucket? = '';\\r\\n    public locationId? = '';\\r\\n    public apiKey? = '';\\r\\n    public authDomain? = '';\\r\\n    public messagingSenderId? = '';\\r\\n    public measurementId? = '';\\r\\n}\\r\\n\\r\\n\\r\\nexport interface QueryConfig {\\r\\n    userId?: string;\\r\\n    id?: string | Array<string>;\\r\\n    articleCategoryId?: string | Array<string>;\\r\\n    orderField?: string;\\r\\n    isDesc?: boolean;\\r\\n    isForwardDir?: boolean;\\r\\n    startPage?: any;\\r\\n    pageSize?: number;\\r\\n    isLive?: boolean | null;\\r\\n  };\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [\r\n        {\r\n            \"name\": \"apiKey\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"appId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"authDomain\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"locationId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"measurementId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"messagingSenderId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"projectId\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"storageBucket\",\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"''\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ],\r\n    \"methods\": []\r\n}"
                },
                {
                    "name": "ClassInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        classInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/component-info/src/constants/component-info.constants.ts": [
                {
                    "name": "COMMPONENT_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/component-info/src/constants/component-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'usage',\r\n        title: 'Usage',\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n    {\r\n        name: 'html',\r\n        title: 'Html',\r\n    },\r\n    {\r\n        name: 'styles',\r\n        title: 'Scss',\r\n    }\r\n]"
                }
            ],
            "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts": [
                {
                    "name": "componentInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"ToolbarComponent\",\r\n    \"description\": \"\",\r\n    \"selector\": \"anu-toolbar\",\r\n    \"styleUrl\": \"./toolbar.component.scss\",\r\n    \"styleSource\": \"$icon-mage-size: 2rem;\\r\\n\\r\\nnav.annuToolbar {\\r\\n    display: flex;\\r\\n\\r\\n    ul {\\r\\n        display: inline-block;\\r\\n        list-style-type: none;\\r\\n        white-space: nowrap;\\r\\n        width: max-content;\\r\\n        padding: 0;\\r\\n        margin: 0;\\r\\n        background-color: var(--anu-primary-lightest);\\r\\n        border: 1px solid var(--anu-primary-normal);\\r\\n        border-radius: calc(var(--anu-border-radius)/2);\\r\\n\\r\\n        li {\\r\\n            display: inline-block;\\r\\n\\r\\n            a {\\r\\n                display: inline-block;\\r\\n                padding: 0.3rem 1rem;\\r\\n                color: var(--anu-accent-darkest);\\r\\n                vertical-align: middle;\\r\\n\\r\\n                &:hover {\\r\\n                    background-color: var(--anu-primary-light);\\r\\n                }\\r\\n\\r\\n                img {\\r\\n                    width: #{$icon-mage-size};\\r\\n                    height: #{$icon-mage-size};\\r\\n                    vertical-align: middle;\\r\\n                    margin: 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        li + li {\\r\\n            border-left: 1px solid var(--anu-primary-light);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    &.vertical {\\r\\n        ul {\\r\\n            display: flex;\\r\\n            flex-direction: column;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\r\n    \"templateUrl\": \"./toolbar.component.html\",\r\n    \"templateSource\": \"<nav role=\\\"toolbar\\\" class=\\\"annuToolbar\\\" [ngClass]=\\\"{'vertical': isVertical}\\\">\\r\\n    <ul class=\\\"shadow\\\">\\r\\n        <li *ngFor=\\\"let item of items\\\">\\r\\n            <a [href]=\\\"item.href\\\" [title]=\\\"item.title\\\" (click)=\\\"itemClicked($event, item)\\\">\\r\\n                <span *ngIf=\\\"item.icon\\\" class=\\\"annuToolbar_icon\\\" [innerHtml]=\\\"item.icon\\\"></span>\\r\\n                <img *ngIf=\\\"item.iconImage\\\" class=\\\"annuToolbar_iconimage\\\" [src]=\\\"item.iconImage\\\" [alt]=\\\"item.title\\\"/>\\r\\n                <span *ngIf=\\\"item.label\\\" class=\\\"annuToolbar_label\\\">{{item.label}}</span>\\r\\n            </a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</nav>\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/components/common-ui/toolbar/toolbar.component.ts\",\r\n    \"tsSource\": \"import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\\r\\nimport { ToolbarItem } from '.';\\r\\n\\r\\n@Component({\\r\\n  selector: 'anu-toolbar',\\r\\n  templateUrl: './toolbar.component.html',\\r\\n  styleUrls: ['./toolbar.component.scss']\\r\\n})\\r\\nexport class ToolbarComponent implements OnInit {\\r\\n  @Input() items: Array<ToolbarItem> = [];\\r\\n  @Input() isVertical: boolean = false;\\r\\n\\r\\n  @Output() changed = new EventEmitter<ToolbarItem>();\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n  }\\r\\n\\r\\n  public itemClicked(event: any, item: ToolbarItem): void {\\r\\n    if (!item.href) {\\r\\n      event.preventDefault();\\r\\n    }\\r\\n\\r\\n    this.changed.emit(item);\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [\r\n        {\r\n            \"name\": \"isVertical\",\r\n            \"type\": \"boolean\",\r\n            \"defaultValue\": \"false\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"items\",\r\n            \"type\": \"Array<ToolbarItem>\",\r\n            \"defaultValue\": \"[]\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"outputProps\": [\r\n        {\r\n            \"name\": \"changed\",\r\n            \"type\": \"EventEmitter\",\r\n            \"defaultValue\": \"new EventEmitter<ToolbarItem>()\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"itemClicked\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"event\",\r\n                    \"type\": \"any\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"item\",\r\n                    \"type\": \"ToolbarItem\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"ngOnInit\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        }\r\n    ]\r\n}"
                },
                {
                    "name": "ComponentInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        componentInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.docs.ts": [
                {
                    "name": "ComponentPropsComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        props: [\r\n            {\r\n                \"name\": \"nextPage\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"pageCount\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"previousPage\",\r\n                \"type\": \"number\",\r\n                \"defaultValue\": \"0\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            },\r\n            {\r\n                \"name\": \"rangePages\",\r\n                \"type\": \"Array<number>\",\r\n                \"defaultValue\": \"[]\",\r\n                \"deprecationMessage\": \"\",\r\n                \"description\": \"\",\r\n                \"accessModifier\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.docs.ts": [
                {
                    "name": "ComponentUsageComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {}\r\n}"
                }
            ],
            "projects/ngx-lib-docs/directive-info/src/constants/directive-info.constants.ts": [
                {
                    "name": "DIRECTIVE_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/directive-info/src/constants/directive-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts": [
                {
                    "name": "directiveInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"FocusDirective\",\r\n    \"description\": \"\",\r\n    \"selector\": \"[focus]\",\r\n    \"styleUrl\": \"\",\r\n    \"styleSource\": \"\",\r\n    \"templateUrl\": \"\",\r\n    \"templateSource\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/components/cms/content-editor/directives/focus.directive.ts\",\r\n    \"tsSource\": \"import { Directive, ElementRef, EventEmitter, Inject, Input, Output } from '@angular/core';\\r\\n\\r\\n@Directive({\\r\\n  selector: '[focus]'\\r\\n})\\r\\nexport class FocusDirective {\\r\\n  @Input() focus: boolean;\\r\\n  @Output() onFocus = new EventEmitter();\\r\\n\\r\\n  constructor(@Inject(ElementRef) private element: ElementRef) { }\\r\\n\\r\\n  protected ngOnChanges() {\\r\\n    if (this.focus === true ) this.element.nativeElement.focus();    \\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [\r\n        {\r\n            \"name\": \"focus\",\r\n            \"type\": \"boolean\",\r\n            \"defaultValue\": \"\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"outputProps\": [\r\n        {\r\n            \"name\": \"onFocus\",\r\n            \"type\": \"EventEmitter\",\r\n            \"defaultValue\": \"new EventEmitter()\",\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"\"\r\n        }\r\n    ],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"ngOnChanges\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"protected\"\r\n        }\r\n    ]\r\n}"
                },
                {
                    "name": "DirectiveInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        directiveInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/guard-info/src/constants/guard-info.constants.ts": [
                {
                    "name": "GUARD_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/guard-info/src/constants/guard-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts": [
                {
                    "name": "guardInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"IsLoggedInGuard\",\r\n    \"description\": \"\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/services/route-guards/is-logged-in.guard.ts\",\r\n    \"tsSource\": \"import { Injectable } from '@angular/core';\\r\\nimport {\\r\\n  CanActivate,\\r\\n  ActivatedRouteSnapshot,\\r\\n  RouterStateSnapshot,\\r\\n  Router,\\r\\n  CanActivateChild,\\r\\n  UrlTree\\r\\n} from '@angular/router';\\r\\nimport { AuthFirebaseService } from '../../firebase/auth/auth-firebase.service';\\r\\n\\r\\n\\r\\n@Injectable()\\r\\nexport class IsLoggedInGuard implements CanActivate, CanActivateChild {\\r\\n\\r\\n  constructor(private authFireSvc: AuthFirebaseService,\\r\\n    private router: Router) { }\\r\\n\\r\\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\\r\\n    const loginUrl = route?.data['loginUrl'] || '/login';\\r\\n    const urlTree = this.router.parseUrl(`${loginUrl}?returnUrl=${state.url}`);\\r\\n    return this.checkUserLoggedIn(urlTree);\\r\\n  }\\r\\n\\r\\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\\r\\n    const loginUrl = route?.data['loginUrl'] || '/login';\\r\\n    const urlTree = this.router.parseUrl(`${loginUrl}?returnUrl=${state.url}`);\\r\\n    return this.checkUserLoggedIn(urlTree);\\r\\n  }\\r\\n\\r\\n  public checkUserLoggedIn(urlTree: UrlTree): Promise<boolean | UrlTree> {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      if (this.authFireSvc.isLoggedIn()) {\\r\\n        resolve(true);\\r\\n      } else if(!this.authFireSvc.isLoggedInFromLocalStorage()) {\\r\\n        resolve(urlTree);\\r\\n      } else {\\r\\n        this.authFireSvc.authStateChanged().subscribe(user => {\\r\\n          if (user) {\\r\\n            resolve(true);\\r\\n          } else {\\r\\n            resolve(urlTree);\\r\\n          }\\r\\n        })\\r\\n      }\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"canActivate\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"route\",\r\n                    \"type\": \"ActivatedRouteSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"state\",\r\n                    \"type\": \"RouterStateSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"canActivateChild\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"route\",\r\n                    \"type\": \"ActivatedRouteSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"state\",\r\n                    \"type\": \"RouterStateSnapshot\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"checkUserLoggedIn\",\r\n            \"returnType\": \"Promise<boolean | UrlTree>\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"urlTree\",\r\n                    \"type\": \"UrlTree\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ]\r\n}"
                },
                {
                    "name": "GuardInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        guardInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/interceptor-info/src/constants/interceptor-info.constants.ts": [
                {
                    "name": "INTERCEPTOR_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interceptor-info/src/constants/interceptor-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts": [
                {
                    "name": "interceptorInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                },
                {
                    "name": "InterceptorInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        interceptorInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/interface-info/src/constants/interface-info.constants.ts": [
                {
                    "name": "INTERFACE_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interface-info/src/constants/interface-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts": [
                {
                    "name": "interfaceInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"ArticlesHomeViewRouteData\",\r\n    \"id\": \"interface-ArticlesHomeViewRouteData-c5809e9d52b7eac963fc776183a8703e5083e4901d19a05b0687e7b834d74147333734a3c7641ce1eb6bc0494ac23f42ee404205c60e21ff42a244a3526dbece\",\r\n    \"file\": \"projects/annu-ng-lib/src/lib/services/articles-route-resolvers/articles-route-resolvers.interface.ts\",\r\n    \"deprecated\": false,\r\n    \"deprecationMessage\": \"\",\r\n    \"type\": \"interface\",\r\n    \"sourceCode\": \"import { Article } from \\\"../../components/cms\\\";\\r\\nimport { PageCategoryGroup } from \\\"../../firebase\\\";\\r\\n\\r\\nexport interface ArticlesHomeViewRouteData {\\r\\n    pageCategoryGroups?: Array<PageCategoryGroup>;\\r\\n}\\r\\n\\r\\nexport interface CategoryViewRouteData {\\r\\n    pageCategoryGroup?: PageCategoryGroup;\\r\\n    pageCategoryGroups?: Array<PageCategoryGroup>;\\r\\n}\\r\\n\\r\\nexport interface ArticleViewRouteData {\\r\\n    article?: Article\\r\\n}\\r\\n\\r\\nexport enum PageDirection {\\r\\n    FORWARD = 'f',\\r\\n    BACKWARD = 'b'\\r\\n};\\r\\n\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"pageCategoryGroups\",\r\n            \"deprecated\": false,\r\n            \"deprecationMessage\": \"\",\r\n            \"type\": \"Array<PageCategoryGroup>\",\r\n            \"optional\": true,\r\n            \"description\": \"\",\r\n            \"line\": 5\r\n        }\r\n    ],\r\n    \"indexSignatures\": [],\r\n    \"kind\": 165,\r\n    \"methods\": []\r\n}"
                },
                {
                    "name": "InterfaceInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        interfaceInfo\r\n    }\r\n}"
                }
            ],
            "projects/ngx-lib-docs/public-api.ts": [
                {
                    "name": "LIB_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/public-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ngx-lib-docs'"
                }
            ],
            "projects/ngx-lib-docs/service-info/src/constants/service-info.constants.ts": [
                {
                    "name": "SERVICE_INFO_TABS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/service-info/src/constants/service-info.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Tab>",
                    "defaultValue": "[\r\n    {\r\n        name: 'overview',\r\n        title: 'Overview',\r\n        active: true,\r\n    },\r\n    {\r\n        name: 'playground',\r\n        title: 'Playground',\r\n    },\r\n    {\r\n        name: 'typescript',\r\n        title: 'Ts',\r\n    },\r\n]"
                }
            ],
            "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts": [
                {
                    "name": "ServiceInfoComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        serviceInfo: svcInfo\r\n    }\r\n}"
                },
                {
                    "name": "svcInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"name\": \"UtilsService\",\r\n    \"description\": \"<p>UtilsService exports all the methods that provides some common utility.</p>\\n\",\r\n    \"tsUrl\": \"projects/annu-ng-lib/src/lib/services/utils/utils.service.ts\",\r\n    \"tsSource\": \"import { Injectable } from '@angular/core';\\r\\n\\r\\n\\r\\n/**\\r\\n * UtilsService exports all the methods that provides some common utility.\\r\\n *\\r\\n * @export\\r\\n * @class UtilsService\\r\\n * @typedef {UtilsService}\\r\\n */\\r\\n@Injectable()\\r\\nexport class UtilsService {\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  /**\\r\\n   * Returns the current Date from browser in the ISO format.\\r\\n   *\\r\\n   * @public\\r\\n   * @readonly\\r\\n   * @type {string}\\r\\n   */\\r\\n  public get currentDate(): string {\\r\\n    return (new Date()).toISOString();\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Returns a local date string\\r\\n   * @date 26/2/2022 - 9:48:21 am\\r\\n   *\\r\\n   * @public\\r\\n   * @param {string} date\\r\\n   * @returns {string}\\r\\n   */\\r\\n  public dateToLocalString(date: string = ''): string {\\r\\n    if (!date) return '';\\r\\n    const options: any = { year: 'numeric', month: 'short', day: 'numeric' };\\r\\n    const dt = new Date(date);\\r\\n    return dt.toLocaleDateString('en-US', options);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Converts a string into dashed string. All spaces are replaced with dashes.\\r\\n   * This converted string can be used for getting a unique name for a title of any content like, article etc.\\r\\n   *\\r\\n   * @param title\\r\\n   * @returns\\r\\n   */\\r\\n  public toDashedString(title: string = ''): string {\\r\\n    return title.split(' ').join('-').toLocaleLowerCase();\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Scrolls the page to the desired top position.\\r\\n   * @date 25/2/2022 - 5:28:11 pm\\r\\n   *\\r\\n   * @public\\r\\n   * @param {number} top\\r\\n   */\\r\\n  public scrollTo(top: number = 0) {\\r\\n    if (typeof window !== 'undefined') {\\r\\n      window.scrollTo({ top: top });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  public getTrimmedStringByChars(str: string, count: number = 0): string {\\r\\n    if (!str || typeof str !== 'string' || !count || count <= 0) {\\r\\n      return str;\\r\\n    }\\r\\n\\r\\n    return str.substring(0, count) + '...';\\r\\n  }\\r\\n}\\r\\n\",\r\n    \"inputProps\": [],\r\n    \"outputProps\": [],\r\n    \"props\": [],\r\n    \"methods\": [\r\n        {\r\n            \"name\": \"dateToLocalString\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"date\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Returns a local date string</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"getTrimmedStringByChars\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"str\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"count\",\r\n                    \"type\": \"number\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"0\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"scrollTo\",\r\n            \"returnType\": \"void\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"top\",\r\n                    \"type\": \"number\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"0\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Scrolls the page to the desired top position.</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        },\r\n        {\r\n            \"name\": \"toDashedString\",\r\n            \"returnType\": \"string\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"title\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"deprecated\": \"\",\r\n            \"deprecationMessage\": \"\",\r\n            \"description\": \"<p>Converts a string into dashed string. All spaces are replaced with dashes.\\nThis converted string can be used for getting a unique name for a title of any content like, article etc.</p>\\n\",\r\n            \"accessModifier\": \"public\"\r\n        }\r\n    ]\r\n}"
                }
            ],
            "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.docs.ts": [
                {
                    "name": "ServiceMethodComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.docs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    projectionContent: '',\r\n    inputPropsValues: {\r\n        method: {\r\n            \"name\": \"getCssVar\",\r\n            \"returnType\": \"CssVar\",\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"name\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\"\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"type\": \"string\",\r\n                    \"deprecated\": false,\r\n                    \"deprecationMessage\": \"\",\r\n                    \"defaultValue\": \"''\"\r\n                }\r\n            ],\r\n            \"description\": \"Returns the CSS variable name\",\r\n        }\r\n    }\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/ngx-lib-docs/docs-common/src/enums/docs-info.enums.ts": [
                {
                    "name": "LibAssetTypeEnums",
                    "childs": [
                        {
                            "name": "components",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "components"
                        },
                        {
                            "name": "services",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "services"
                        },
                        {
                            "name": "directives",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "directives"
                        },
                        {
                            "name": "interfaces",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "interfaces"
                        },
                        {
                            "name": "guards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "guards"
                        },
                        {
                            "name": "classes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "classes"
                        },
                        {
                            "name": "interceptors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "interceptors"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/ngx-lib-docs/docs-common/src/enums/docs-info.enums.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts": [
                {
                    "name": "LibAssetInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ComponentInfo | ServiceInfo | DirectiveInfo | InterfaceInfo | GuardInfo | ClassInfo | InterceptorInfo",
                    "file": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "classInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/class-info/src/components/class-info/class-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClassInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/class-info/src/constants/class-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASS_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentInfoComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "componentInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/components/component-info/component-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComponentInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentUsageComponent",
                "coveragePercent": 19,
                "coverageCount": "4/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/components/component-usage/component-usage.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComponentUsageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-info/src/constants/component-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMMPONENT_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentPropsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/component-props/src/components/component-props/component-props.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComponentPropsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectiveInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "directiveInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/directive-info/src/components/directive-info/directive-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectiveInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/directive-info/src/constants/directive-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVE_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCESS_MODIFIERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/constants/docs-common.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROPERTY_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/class-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/component-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentInfo",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/component-props.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentProp",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/directive-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DirectiveInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-common.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocsData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibAssetsInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibInfo",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibsInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/docs-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/guard-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GuardInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/interceptor-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterceptorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/interface-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/interfaces/service-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/services/docs-info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocsInfoService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/docs-common/src/services/docs-parser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocsParserService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GuardInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "guardInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/guard-info/src/components/guard-info/guard-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GuardInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/guard-info/src/constants/guard-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GUARD_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InterceptorInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interceptorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interceptor-info/src/components/interceptor-info/interceptor-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InterceptorInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interceptor-info/src/constants/interceptor-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INTERCEPTOR_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InterfaceInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interfaceInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interface-info/src/components/interface-info/interface-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InterfaceInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/interface-info/src/constants/interface-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INTERFACE_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/public-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIB_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceInfoComponent",
                "coveragePercent": 9,
                "coverageCount": "2/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ServiceInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-info/src/components/service-info/service-info.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "svcInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-info/src/constants/service-info.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SERVICE_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceMethodComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-method/src/components/service-method/service-method.docs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ServiceMethodComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-docs/service-method/src/constants/class-method.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASS_INFO_TABS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}